{"ast":null,"code":"import { Factory } from \"../Factory.js\";\nimport { Shape } from \"../Shape.js\";\nimport { getNumberOrArrayOfNumbersValidator, getNumberValidator } from \"../Validators.js\";\nimport { _registerNode } from \"../Global.js\";\nimport { Util } from \"../Util.js\";\nexport class RegularPolygon extends Shape {\n  _sceneFunc(context) {\n    const points = this._getPoints(),\n      radius = this.radius(),\n      sides = this.sides(),\n      cornerRadius = this.cornerRadius();\n    context.beginPath();\n    if (!cornerRadius) {\n      context.moveTo(points[0].x, points[0].y);\n      for (let n = 1; n < points.length; n++) {\n        context.lineTo(points[n].x, points[n].y);\n      }\n    } else {\n      Util.drawRoundedPolygonPath(context, points, sides, radius, cornerRadius);\n    }\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n  _getPoints() {\n    const sides = this.attrs.sides;\n    const radius = this.attrs.radius || 0;\n    const points = [];\n    for (let n = 0; n < sides; n++) {\n      points.push({\n        x: radius * Math.sin(n * 2 * Math.PI / sides),\n        y: -1 * radius * Math.cos(n * 2 * Math.PI / sides)\n      });\n    }\n    return points;\n  }\n  getSelfRect() {\n    const points = this._getPoints();\n    let minX = points[0].x;\n    let maxX = points[0].y;\n    let minY = points[0].x;\n    let maxY = points[0].y;\n    points.forEach(point => {\n      minX = Math.min(minX, point.x);\n      maxX = Math.max(maxX, point.x);\n      minY = Math.min(minY, point.y);\n      maxY = Math.max(maxY, point.y);\n    });\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n  getWidth() {\n    return this.radius() * 2;\n  }\n  getHeight() {\n    return this.radius() * 2;\n  }\n  setWidth(width) {\n    this.radius(width / 2);\n  }\n  setHeight(height) {\n    this.radius(height / 2);\n  }\n}\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n_registerNode(RegularPolygon);\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'cornerRadius', 0, getNumberOrArrayOfNumbersValidator(4));","map":{"version":3,"names":["Factory","Shape","getNumberOrArrayOfNumbersValidator","getNumberValidator","_registerNode","Util","RegularPolygon","_sceneFunc","context","points","_getPoints","radius","sides","cornerRadius","beginPath","moveTo","x","y","n","length","lineTo","drawRoundedPolygonPath","closePath","fillStrokeShape","attrs","push","Math","sin","PI","cos","getSelfRect","minX","maxX","minY","maxY","forEach","point","min","max","width","height","getWidth","getHeight","setWidth","setHeight","prototype","className","_centroid","_attrsAffectingSize","addGetterSetter"],"sources":["C:/Users/91822/Piyush/Desktop/Week -6/matty-project/client/node_modules/konva/lib/shapes/RegularPolygon.js"],"sourcesContent":["import { Factory } from \"../Factory.js\";\nimport { Shape } from \"../Shape.js\";\nimport { getNumberOrArrayOfNumbersValidator, getNumberValidator, } from \"../Validators.js\";\nimport { _registerNode } from \"../Global.js\";\nimport { Util } from \"../Util.js\";\nexport class RegularPolygon extends Shape {\n    _sceneFunc(context) {\n        const points = this._getPoints(), radius = this.radius(), sides = this.sides(), cornerRadius = this.cornerRadius();\n        context.beginPath();\n        if (!cornerRadius) {\n            context.moveTo(points[0].x, points[0].y);\n            for (let n = 1; n < points.length; n++) {\n                context.lineTo(points[n].x, points[n].y);\n            }\n        }\n        else {\n            Util.drawRoundedPolygonPath(context, points, sides, radius, cornerRadius);\n        }\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    _getPoints() {\n        const sides = this.attrs.sides;\n        const radius = this.attrs.radius || 0;\n        const points = [];\n        for (let n = 0; n < sides; n++) {\n            points.push({\n                x: radius * Math.sin((n * 2 * Math.PI) / sides),\n                y: -1 * radius * Math.cos((n * 2 * Math.PI) / sides),\n            });\n        }\n        return points;\n    }\n    getSelfRect() {\n        const points = this._getPoints();\n        let minX = points[0].x;\n        let maxX = points[0].y;\n        let minY = points[0].x;\n        let maxY = points[0].y;\n        points.forEach((point) => {\n            minX = Math.min(minX, point.x);\n            maxX = Math.max(maxX, point.x);\n            minY = Math.min(minY, point.y);\n            maxY = Math.max(maxY, point.y);\n        });\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    }\n    getWidth() {\n        return this.radius() * 2;\n    }\n    getHeight() {\n        return this.radius() * 2;\n    }\n    setWidth(width) {\n        this.radius(width / 2);\n    }\n    setHeight(height) {\n        this.radius(height / 2);\n    }\n}\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n_registerNode(RegularPolygon);\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'cornerRadius', 0, getNumberOrArrayOfNumbersValidator(4));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}