{"ast":null,"code":"import { Factory } from \"../Factory.js\";\nimport { Util } from \"../Util.js\";\nimport { Node } from \"../Node.js\";\nimport { getNumberValidator } from \"../Validators.js\";\nexport const Pixelate = function (imageData) {\n  let pixelSize = Math.ceil(this.pixelSize()),\n    width = imageData.width,\n    height = imageData.height,\n    nBinsX = Math.ceil(width / pixelSize),\n    nBinsY = Math.ceil(height / pixelSize),\n    data = imageData.data;\n  if (pixelSize <= 0) {\n    Util.error('pixelSize value can not be <= 0');\n    return;\n  }\n  for (let xBin = 0; xBin < nBinsX; xBin += 1) {\n    for (let yBin = 0; yBin < nBinsY; yBin += 1) {\n      let red = 0;\n      let green = 0;\n      let blue = 0;\n      let alpha = 0;\n      const xBinStart = xBin * pixelSize;\n      const xBinEnd = xBinStart + pixelSize;\n      const yBinStart = yBin * pixelSize;\n      const yBinEnd = yBinStart + pixelSize;\n      let pixelsInBin = 0;\n      for (let x = xBinStart; x < xBinEnd; x += 1) {\n        if (x >= width) {\n          continue;\n        }\n        for (let y = yBinStart; y < yBinEnd; y += 1) {\n          if (y >= height) {\n            continue;\n          }\n          const i = (width * y + x) * 4;\n          red += data[i + 0];\n          green += data[i + 1];\n          blue += data[i + 2];\n          alpha += data[i + 3];\n          pixelsInBin += 1;\n        }\n      }\n      red = red / pixelsInBin;\n      green = green / pixelsInBin;\n      blue = blue / pixelsInBin;\n      alpha = alpha / pixelsInBin;\n      for (let x = xBinStart; x < xBinEnd; x += 1) {\n        if (x >= width) {\n          continue;\n        }\n        for (let y = yBinStart; y < yBinEnd; y += 1) {\n          if (y >= height) {\n            continue;\n          }\n          const i = (width * y + x) * 4;\n          data[i + 0] = red;\n          data[i + 1] = green;\n          data[i + 2] = blue;\n          data[i + 3] = alpha;\n        }\n      }\n    }\n  }\n};\nFactory.addGetterSetter(Node, 'pixelSize', 8, getNumberValidator(), Factory.afterSetFilter);","map":{"version":3,"names":["Factory","Util","Node","getNumberValidator","Pixelate","imageData","pixelSize","Math","ceil","width","height","nBinsX","nBinsY","data","error","xBin","yBin","red","green","blue","alpha","xBinStart","xBinEnd","yBinStart","yBinEnd","pixelsInBin","x","y","i","addGetterSetter","afterSetFilter"],"sources":["C:/Users/91822/Piyush/Desktop/Week -6/matty-project/client/node_modules/konva/lib/filters/Pixelate.js"],"sourcesContent":["import { Factory } from \"../Factory.js\";\nimport { Util } from \"../Util.js\";\nimport { Node } from \"../Node.js\";\nimport { getNumberValidator } from \"../Validators.js\";\nexport const Pixelate = function (imageData) {\n    let pixelSize = Math.ceil(this.pixelSize()), width = imageData.width, height = imageData.height, nBinsX = Math.ceil(width / pixelSize), nBinsY = Math.ceil(height / pixelSize), data = imageData.data;\n    if (pixelSize <= 0) {\n        Util.error('pixelSize value can not be <= 0');\n        return;\n    }\n    for (let xBin = 0; xBin < nBinsX; xBin += 1) {\n        for (let yBin = 0; yBin < nBinsY; yBin += 1) {\n            let red = 0;\n            let green = 0;\n            let blue = 0;\n            let alpha = 0;\n            const xBinStart = xBin * pixelSize;\n            const xBinEnd = xBinStart + pixelSize;\n            const yBinStart = yBin * pixelSize;\n            const yBinEnd = yBinStart + pixelSize;\n            let pixelsInBin = 0;\n            for (let x = xBinStart; x < xBinEnd; x += 1) {\n                if (x >= width) {\n                    continue;\n                }\n                for (let y = yBinStart; y < yBinEnd; y += 1) {\n                    if (y >= height) {\n                        continue;\n                    }\n                    const i = (width * y + x) * 4;\n                    red += data[i + 0];\n                    green += data[i + 1];\n                    blue += data[i + 2];\n                    alpha += data[i + 3];\n                    pixelsInBin += 1;\n                }\n            }\n            red = red / pixelsInBin;\n            green = green / pixelsInBin;\n            blue = blue / pixelsInBin;\n            alpha = alpha / pixelsInBin;\n            for (let x = xBinStart; x < xBinEnd; x += 1) {\n                if (x >= width) {\n                    continue;\n                }\n                for (let y = yBinStart; y < yBinEnd; y += 1) {\n                    if (y >= height) {\n                        continue;\n                    }\n                    const i = (width * y + x) * 4;\n                    data[i + 0] = red;\n                    data[i + 1] = green;\n                    data[i + 2] = blue;\n                    data[i + 3] = alpha;\n                }\n            }\n        }\n    }\n};\nFactory.addGetterSetter(Node, 'pixelSize', 8, getNumberValidator(), Factory.afterSetFilter);\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAe;AACvC,SAASC,IAAI,QAAQ,YAAY;AACjC,SAASC,IAAI,QAAQ,YAAY;AACjC,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,OAAO,MAAMC,QAAQ,GAAG,SAAAA,CAAUC,SAAS,EAAE;EACzC,IAAIC,SAAS,GAAGC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACF,SAAS,CAAC,CAAC,CAAC;IAAEG,KAAK,GAAGJ,SAAS,CAACI,KAAK;IAAEC,MAAM,GAAGL,SAAS,CAACK,MAAM;IAAEC,MAAM,GAAGJ,IAAI,CAACC,IAAI,CAACC,KAAK,GAAGH,SAAS,CAAC;IAAEM,MAAM,GAAGL,IAAI,CAACC,IAAI,CAACE,MAAM,GAAGJ,SAAS,CAAC;IAAEO,IAAI,GAAGR,SAAS,CAACQ,IAAI;EACrM,IAAIP,SAAS,IAAI,CAAC,EAAE;IAChBL,IAAI,CAACa,KAAK,CAAC,iCAAiC,CAAC;IAC7C;EACJ;EACA,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGJ,MAAM,EAAEI,IAAI,IAAI,CAAC,EAAE;IACzC,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGJ,MAAM,EAAEI,IAAI,IAAI,CAAC,EAAE;MACzC,IAAIC,GAAG,GAAG,CAAC;MACX,IAAIC,KAAK,GAAG,CAAC;MACb,IAAIC,IAAI,GAAG,CAAC;MACZ,IAAIC,KAAK,GAAG,CAAC;MACb,MAAMC,SAAS,GAAGN,IAAI,GAAGT,SAAS;MAClC,MAAMgB,OAAO,GAAGD,SAAS,GAAGf,SAAS;MACrC,MAAMiB,SAAS,GAAGP,IAAI,GAAGV,SAAS;MAClC,MAAMkB,OAAO,GAAGD,SAAS,GAAGjB,SAAS;MACrC,IAAImB,WAAW,GAAG,CAAC;MACnB,KAAK,IAAIC,CAAC,GAAGL,SAAS,EAAEK,CAAC,GAAGJ,OAAO,EAAEI,CAAC,IAAI,CAAC,EAAE;QACzC,IAAIA,CAAC,IAAIjB,KAAK,EAAE;UACZ;QACJ;QACA,KAAK,IAAIkB,CAAC,GAAGJ,SAAS,EAAEI,CAAC,GAAGH,OAAO,EAAEG,CAAC,IAAI,CAAC,EAAE;UACzC,IAAIA,CAAC,IAAIjB,MAAM,EAAE;YACb;UACJ;UACA,MAAMkB,CAAC,GAAG,CAACnB,KAAK,GAAGkB,CAAC,GAAGD,CAAC,IAAI,CAAC;UAC7BT,GAAG,IAAIJ,IAAI,CAACe,CAAC,GAAG,CAAC,CAAC;UAClBV,KAAK,IAAIL,IAAI,CAACe,CAAC,GAAG,CAAC,CAAC;UACpBT,IAAI,IAAIN,IAAI,CAACe,CAAC,GAAG,CAAC,CAAC;UACnBR,KAAK,IAAIP,IAAI,CAACe,CAAC,GAAG,CAAC,CAAC;UACpBH,WAAW,IAAI,CAAC;QACpB;MACJ;MACAR,GAAG,GAAGA,GAAG,GAAGQ,WAAW;MACvBP,KAAK,GAAGA,KAAK,GAAGO,WAAW;MAC3BN,IAAI,GAAGA,IAAI,GAAGM,WAAW;MACzBL,KAAK,GAAGA,KAAK,GAAGK,WAAW;MAC3B,KAAK,IAAIC,CAAC,GAAGL,SAAS,EAAEK,CAAC,GAAGJ,OAAO,EAAEI,CAAC,IAAI,CAAC,EAAE;QACzC,IAAIA,CAAC,IAAIjB,KAAK,EAAE;UACZ;QACJ;QACA,KAAK,IAAIkB,CAAC,GAAGJ,SAAS,EAAEI,CAAC,GAAGH,OAAO,EAAEG,CAAC,IAAI,CAAC,EAAE;UACzC,IAAIA,CAAC,IAAIjB,MAAM,EAAE;YACb;UACJ;UACA,MAAMkB,CAAC,GAAG,CAACnB,KAAK,GAAGkB,CAAC,GAAGD,CAAC,IAAI,CAAC;UAC7Bb,IAAI,CAACe,CAAC,GAAG,CAAC,CAAC,GAAGX,GAAG;UACjBJ,IAAI,CAACe,CAAC,GAAG,CAAC,CAAC,GAAGV,KAAK;UACnBL,IAAI,CAACe,CAAC,GAAG,CAAC,CAAC,GAAGT,IAAI;UAClBN,IAAI,CAACe,CAAC,GAAG,CAAC,CAAC,GAAGR,KAAK;QACvB;MACJ;IACJ;EACJ;AACJ,CAAC;AACDpB,OAAO,CAAC6B,eAAe,CAAC3B,IAAI,EAAE,WAAW,EAAE,CAAC,EAAEC,kBAAkB,CAAC,CAAC,EAAEH,OAAO,CAAC8B,cAAc,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}