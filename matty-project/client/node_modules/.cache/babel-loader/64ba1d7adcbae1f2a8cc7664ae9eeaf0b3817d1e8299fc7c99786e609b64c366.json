{"ast":null,"code":"import { Util } from \"../Util.js\";\nimport { Factory } from \"../Factory.js\";\nimport { Shape } from \"../Shape.js\";\nimport { Konva } from \"../Global.js\";\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator } from \"../Validators.js\";\nimport { _registerNode } from \"../Global.js\";\nexport function stringToArray(string) {\n  return [...string].reduce((acc, char, index, array) => {\n    if (/\\p{Emoji}/u.test(char)) {\n      const nextChar = array[index + 1];\n      if (nextChar && /\\p{Emoji_Modifier}|\\u200D/u.test(nextChar)) {\n        acc.push(char + nextChar);\n        array[index + 1] = '';\n      } else {\n        acc.push(char);\n      }\n    } else if (/\\p{Regional_Indicator}{2}/u.test(char + (array[index + 1] || ''))) {\n      acc.push(char + array[index + 1]);\n    } else if (index > 0 && /\\p{Mn}|\\p{Me}|\\p{Mc}/u.test(char)) {\n      acc[acc.length - 1] += char;\n    } else if (char) {\n      acc.push(char);\n    }\n    return acc;\n  }, []);\n}\nconst AUTO = 'auto',\n  CENTER = 'center',\n  INHERIT = 'inherit',\n  JUSTIFY = 'justify',\n  CHANGE_KONVA = 'Change.konva',\n  CONTEXT_2D = '2d',\n  DASH = '-',\n  LEFT = 'left',\n  TEXT = 'text',\n  TEXT_UPPER = 'Text',\n  TOP = 'top',\n  BOTTOM = 'bottom',\n  MIDDLE = 'middle',\n  NORMAL = 'normal',\n  PX_SPACE = 'px ',\n  SPACE = ' ',\n  RIGHT = 'right',\n  RTL = 'rtl',\n  WORD = 'word',\n  CHAR = 'char',\n  NONE = 'none',\n  ELLIPSIS = 'â€¦',\n  ATTR_CHANGE_LIST = ['direction', 'fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'verticalAlign', 'lineHeight', 'text', 'width', 'height', 'wrap', 'ellipsis', 'letterSpacing'],\n  attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n  return fontFamily.split(',').map(family => {\n    family = family.trim();\n    const hasSpace = family.indexOf(' ') >= 0;\n    const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n    if (hasSpace && !hasQuotes) {\n      family = `\"${family}\"`;\n    }\n    return family;\n  }).join(', ');\n}\nlet dummyContext;\nfunction getDummyContext() {\n  if (dummyContext) {\n    return dummyContext;\n  }\n  dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n  return dummyContext;\n}\nfunction _fillFunc(context) {\n  context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n  context.setAttr('miterLimit', 2);\n  context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n  config = config || {};\n  if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops && !config.fillPatternImage) {\n    config.fill = config.fill || 'black';\n  }\n  return config;\n}\nexport class Text extends Shape {\n  constructor(config) {\n    super(checkDefaultFill(config));\n    this._partialTextX = 0;\n    this._partialTextY = 0;\n    for (let n = 0; n < attrChangeListLen; n++) {\n      this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n    }\n    this._setTextData();\n  }\n  _sceneFunc(context) {\n    var _a, _b;\n    const textArr = this.textArr,\n      textArrLen = textArr.length;\n    if (!this.text()) {\n      return;\n    }\n    let padding = this.padding(),\n      fontSize = this.fontSize(),\n      lineHeightPx = this.lineHeight() * fontSize,\n      verticalAlign = this.verticalAlign(),\n      direction = this.direction(),\n      alignY = 0,\n      align = this.align(),\n      totalWidth = this.getWidth(),\n      letterSpacing = this.letterSpacing(),\n      charRenderFunc = this.charRenderFunc(),\n      fill = this.fill(),\n      textDecoration = this.textDecoration(),\n      shouldUnderline = textDecoration.indexOf('underline') !== -1,\n      shouldLineThrough = textDecoration.indexOf('line-through') !== -1,\n      n;\n    direction = direction === INHERIT ? context.direction : direction;\n    let translateY = lineHeightPx / 2;\n    let baseline = MIDDLE;\n    if (!Konva.legacyTextRendering) {\n      const metrics = this.measureSize('M');\n      baseline = 'alphabetic';\n      const ascent = (_a = metrics.fontBoundingBoxAscent) !== null && _a !== void 0 ? _a : metrics.actualBoundingBoxAscent;\n      const descent = (_b = metrics.fontBoundingBoxDescent) !== null && _b !== void 0 ? _b : metrics.actualBoundingBoxDescent;\n      translateY = (ascent - descent) / 2 + lineHeightPx / 2;\n    }\n    if (direction === RTL) {\n      context.setAttr('direction', direction);\n    }\n    context.setAttr('font', this._getContextFont());\n    context.setAttr('textBaseline', baseline);\n    context.setAttr('textAlign', LEFT);\n    if (verticalAlign === MIDDLE) {\n      alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n    } else if (verticalAlign === BOTTOM) {\n      alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n    }\n    context.translate(padding, alignY + padding);\n    for (n = 0; n < textArrLen; n++) {\n      let lineTranslateX = 0;\n      let lineTranslateY = 0;\n      const obj = textArr[n],\n        text = obj.text,\n        width = obj.width,\n        lastLine = obj.lastInParagraph;\n      context.save();\n      if (align === RIGHT) {\n        lineTranslateX += totalWidth - width - padding * 2;\n      } else if (align === CENTER) {\n        lineTranslateX += (totalWidth - width - padding * 2) / 2;\n      }\n      if (shouldUnderline) {\n        context.save();\n        context.beginPath();\n        const yOffset = !Konva.legacyTextRendering ? Math.round(fontSize / 4) : Math.round(fontSize / 2);\n        const x = lineTranslateX;\n        const y = translateY + lineTranslateY + yOffset;\n        context.moveTo(x, y);\n        const lineWidth = align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n        context.lineTo(x + Math.round(lineWidth), y);\n        context.lineWidth = fontSize / 15;\n        const gradient = this._getLinearGradient();\n        context.strokeStyle = gradient || fill;\n        context.stroke();\n        context.restore();\n      }\n      if (direction !== RTL && (letterSpacing !== 0 || align === JUSTIFY || charRenderFunc)) {\n        const spacesNumber = text.split(' ').length - 1;\n        const array = stringToArray(text);\n        for (let li = 0; li < array.length; li++) {\n          const letter = array[li];\n          if (letter === ' ' && !lastLine && align === JUSTIFY) {\n            lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n          }\n          this._partialTextX = lineTranslateX;\n          this._partialTextY = translateY + lineTranslateY;\n          this._partialText = letter;\n          if (charRenderFunc) {\n            context.save();\n            const previousLines = textArr.slice(0, n);\n            const previousGraphemes = previousLines.reduce((acc, line) => acc + stringToArray(line.text).length, 0);\n            const charIndex = li + previousGraphemes;\n            charRenderFunc({\n              char: letter,\n              index: charIndex,\n              x: lineTranslateX,\n              y: translateY + lineTranslateY,\n              lineIndex: n,\n              column: li,\n              isLastInLine: lastLine,\n              width: this.measureSize(letter).width,\n              context\n            });\n          }\n          context.fillStrokeShape(this);\n          if (charRenderFunc) {\n            context.restore();\n          }\n          lineTranslateX += this.measureSize(letter).width + letterSpacing;\n        }\n      } else {\n        if (letterSpacing !== 0) {\n          context.setAttr('letterSpacing', `${letterSpacing}px`);\n        }\n        this._partialTextX = lineTranslateX;\n        this._partialTextY = translateY + lineTranslateY;\n        this._partialText = text;\n        context.fillStrokeShape(this);\n      }\n      if (shouldLineThrough) {\n        context.save();\n        context.beginPath();\n        const yOffset = !Konva.legacyTextRendering ? -Math.round(fontSize / 4) : 0;\n        const x = align === JUSTIFY ? 0 : lineTranslateX;\n        context.moveTo(x, translateY + lineTranslateY + yOffset);\n        const lineWidth = align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n        context.lineTo(x + Math.round(lineWidth), translateY + lineTranslateY + yOffset);\n        context.lineWidth = fontSize / 15;\n        const gradient = this._getLinearGradient();\n        context.strokeStyle = gradient || fill;\n        context.stroke();\n        context.restore();\n      }\n      context.restore();\n      if (textArrLen > 1) {\n        translateY += lineHeightPx;\n      }\n    }\n  }\n  _hitFunc(context) {\n    const width = this.getWidth(),\n      height = this.getHeight();\n    context.beginPath();\n    context.rect(0, 0, width, height);\n    context.closePath();\n    context.fillStrokeShape(this);\n  }\n  setText(text) {\n    const str = Util._isString(text) ? text : text === null || text === undefined ? '' : text + '';\n    this._setAttr(TEXT, str);\n    return this;\n  }\n  getWidth() {\n    const isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n    return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n  }\n  getHeight() {\n    const isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n    return isAuto ? this.fontSize() * this.textArr.length * this.lineHeight() + this.padding() * 2 : this.attrs.height;\n  }\n  getTextWidth() {\n    return this.textWidth;\n  }\n  getTextHeight() {\n    Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n    return this.textHeight;\n  }\n  measureSize(text) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    let _context = getDummyContext(),\n      fontSize = this.fontSize(),\n      metrics;\n    _context.save();\n    _context.font = this._getContextFont();\n    metrics = _context.measureText(text);\n    _context.restore();\n    const scaleFactor = fontSize / 100;\n    return {\n      actualBoundingBoxAscent: (_a = metrics.actualBoundingBoxAscent) !== null && _a !== void 0 ? _a : 71.58203125 * scaleFactor,\n      actualBoundingBoxDescent: (_b = metrics.actualBoundingBoxDescent) !== null && _b !== void 0 ? _b : 0,\n      actualBoundingBoxLeft: (_c = metrics.actualBoundingBoxLeft) !== null && _c !== void 0 ? _c : -7.421875 * scaleFactor,\n      actualBoundingBoxRight: (_d = metrics.actualBoundingBoxRight) !== null && _d !== void 0 ? _d : 75.732421875 * scaleFactor,\n      alphabeticBaseline: (_e = metrics.alphabeticBaseline) !== null && _e !== void 0 ? _e : 0,\n      emHeightAscent: (_f = metrics.emHeightAscent) !== null && _f !== void 0 ? _f : 100 * scaleFactor,\n      emHeightDescent: (_g = metrics.emHeightDescent) !== null && _g !== void 0 ? _g : -20 * scaleFactor,\n      fontBoundingBoxAscent: (_h = metrics.fontBoundingBoxAscent) !== null && _h !== void 0 ? _h : 91 * scaleFactor,\n      fontBoundingBoxDescent: (_j = metrics.fontBoundingBoxDescent) !== null && _j !== void 0 ? _j : 21 * scaleFactor,\n      hangingBaseline: (_k = metrics.hangingBaseline) !== null && _k !== void 0 ? _k : 72.80000305175781 * scaleFactor,\n      ideographicBaseline: (_l = metrics.ideographicBaseline) !== null && _l !== void 0 ? _l : -21 * scaleFactor,\n      width: metrics.width,\n      height: fontSize\n    };\n  }\n  _getContextFont() {\n    return this.fontStyle() + SPACE + this.fontVariant() + SPACE + (this.fontSize() + PX_SPACE) + normalizeFontFamily(this.fontFamily());\n  }\n  _addTextLine(line) {\n    const align = this.align();\n    if (align === JUSTIFY) {\n      line = line.trim();\n    }\n    const width = this._getTextWidth(line);\n    return this.textArr.push({\n      text: line,\n      width: width,\n      lastInParagraph: false\n    });\n  }\n  _getTextWidth(text) {\n    const letterSpacing = this.letterSpacing();\n    const length = text.length;\n    return getDummyContext().measureText(text).width + letterSpacing * length;\n  }\n  _setTextData() {\n    let lines = this.text().split('\\n'),\n      fontSize = +this.fontSize(),\n      textWidth = 0,\n      lineHeightPx = this.lineHeight() * fontSize,\n      width = this.attrs.width,\n      height = this.attrs.height,\n      fixedWidth = width !== AUTO && width !== undefined,\n      fixedHeight = height !== AUTO && height !== undefined,\n      padding = this.padding(),\n      maxWidth = width - padding * 2,\n      maxHeightPx = height - padding * 2,\n      currentHeightPx = 0,\n      wrap = this.wrap(),\n      shouldWrap = wrap !== NONE,\n      wrapAtWord = wrap !== CHAR && shouldWrap,\n      shouldAddEllipsis = this.ellipsis();\n    this.textArr = [];\n    getDummyContext().font = this._getContextFont();\n    const additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n    for (let i = 0, max = lines.length; i < max; ++i) {\n      let line = lines[i];\n      let lineWidth = this._getTextWidth(line);\n      if (fixedWidth && lineWidth > maxWidth) {\n        while (line.length > 0) {\n          let low = 0,\n            high = stringToArray(line).length,\n            match = '',\n            matchWidth = 0;\n          while (low < high) {\n            const mid = low + high >>> 1,\n              lineArray = stringToArray(line),\n              substr = lineArray.slice(0, mid + 1).join(''),\n              substrWidth = this._getTextWidth(substr);\n            const shouldConsiderEllipsis = shouldAddEllipsis && fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx;\n            const effectiveWidth = shouldConsiderEllipsis ? substrWidth + additionalWidth : substrWidth;\n            if (effectiveWidth <= maxWidth) {\n              low = mid + 1;\n              match = substr;\n              matchWidth = substrWidth;\n            } else {\n              high = mid;\n            }\n          }\n          if (match) {\n            if (wrapAtWord) {\n              const lineArray = stringToArray(line);\n              const matchArray = stringToArray(match);\n              const nextChar = lineArray[matchArray.length];\n              const nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n              let wrapIndex;\n              if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                wrapIndex = matchArray.length;\n              } else {\n                const lastSpaceIndex = matchArray.lastIndexOf(SPACE);\n                const lastDashIndex = matchArray.lastIndexOf(DASH);\n                wrapIndex = Math.max(lastSpaceIndex, lastDashIndex) + 1;\n              }\n              if (wrapIndex > 0) {\n                low = wrapIndex;\n                match = lineArray.slice(0, low).join('');\n                matchWidth = this._getTextWidth(match);\n              }\n            }\n            match = match.trimRight();\n            this._addTextLine(match);\n            textWidth = Math.max(textWidth, matchWidth);\n            currentHeightPx += lineHeightPx;\n            const shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n            if (shouldHandleEllipsis) {\n              this._tryToAddEllipsisToLastLine();\n              break;\n            }\n            const lineArray = stringToArray(line);\n            line = lineArray.slice(low).join('').trimLeft();\n            if (line.length > 0) {\n              lineWidth = this._getTextWidth(line);\n              if (lineWidth <= maxWidth) {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                break;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n      } else {\n        this._addTextLine(line);\n        currentHeightPx += lineHeightPx;\n        textWidth = Math.max(textWidth, lineWidth);\n        if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n          this._tryToAddEllipsisToLastLine();\n        }\n      }\n      if (this.textArr[this.textArr.length - 1]) {\n        this.textArr[this.textArr.length - 1].lastInParagraph = true;\n      }\n      if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n        break;\n      }\n    }\n    this.textHeight = fontSize;\n    this.textWidth = textWidth;\n  }\n  _shouldHandleEllipsis(currentHeightPx) {\n    const fontSize = +this.fontSize(),\n      lineHeightPx = this.lineHeight() * fontSize,\n      height = this.attrs.height,\n      fixedHeight = height !== AUTO && height !== undefined,\n      padding = this.padding(),\n      maxHeightPx = height - padding * 2,\n      wrap = this.wrap(),\n      shouldWrap = wrap !== NONE;\n    return !shouldWrap || fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx;\n  }\n  _tryToAddEllipsisToLastLine() {\n    const width = this.attrs.width,\n      fixedWidth = width !== AUTO && width !== undefined,\n      padding = this.padding(),\n      maxWidth = width - padding * 2,\n      shouldAddEllipsis = this.ellipsis();\n    const lastLine = this.textArr[this.textArr.length - 1];\n    if (!lastLine || !shouldAddEllipsis) {\n      return;\n    }\n    if (fixedWidth) {\n      const haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n      if (!haveSpace) {\n        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n      }\n    }\n    this.textArr.splice(this.textArr.length - 1, 1);\n    this._addTextLine(lastLine.text + ELLIPSIS);\n  }\n  getStrokeScaleEnabled() {\n    return true;\n  }\n  _useBufferCanvas() {\n    const hasLine = this.textDecoration().indexOf('underline') !== -1 || this.textDecoration().indexOf('line-through') !== -1;\n    const hasShadow = this.hasShadow();\n    if (hasLine && hasShadow) {\n      return true;\n    }\n    return super._useBufferCanvas();\n  }\n}\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = ['text', 'fontSize', 'padding', 'wrap', 'lineHeight', 'letterSpacing'];\n_registerNode(Text);\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'direction', INHERIT);\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');\nFactory.addGetterSetter(Text, 'charRenderFunc', undefined);","map":{"version":3,"names":["Util","Factory","Shape","Konva","getNumberValidator","getStringValidator","getNumberOrAutoValidator","getBooleanValidator","_registerNode","stringToArray","string","reduce","acc","char","index","array","test","nextChar","push","length","AUTO","CENTER","INHERIT","JUSTIFY","CHANGE_KONVA","CONTEXT_2D","DASH","LEFT","TEXT","TEXT_UPPER","TOP","BOTTOM","MIDDLE","NORMAL","PX_SPACE","SPACE","RIGHT","RTL","WORD","CHAR","NONE","ELLIPSIS","ATTR_CHANGE_LIST","attrChangeListLen","normalizeFontFamily","fontFamily","split","map","family","trim","hasSpace","indexOf","hasQuotes","join","dummyContext","getDummyContext","createCanvasElement","getContext","_fillFunc","context","fillText","_partialText","_partialTextX","_partialTextY","_strokeFunc","setAttr","strokeText","checkDefaultFill","config","fillLinearGradientColorStops","fillRadialGradientColorStops","fillPatternImage","fill","Text","constructor","n","on","_setTextData","_sceneFunc","_a","_b","textArr","textArrLen","text","padding","fontSize","lineHeightPx","lineHeight","verticalAlign","direction","alignY","align","totalWidth","getWidth","letterSpacing","charRenderFunc","textDecoration","shouldUnderline","shouldLineThrough","translateY","baseline","legacyTextRendering","metrics","measureSize","ascent","fontBoundingBoxAscent","actualBoundingBoxAscent","descent","fontBoundingBoxDescent","actualBoundingBoxDescent","_getContextFont","getHeight","translate","lineTranslateX","lineTranslateY","obj","width","lastLine","lastInParagraph","save","beginPath","yOffset","Math","round","x","y","moveTo","lineWidth","lineTo","gradient","_getLinearGradient","strokeStyle","stroke","restore","spacesNumber","li","letter","previousLines","slice","previousGraphemes","line","charIndex","lineIndex","column","isLastInLine","fillStrokeShape","_hitFunc","height","rect","closePath","setText","str","_isString","undefined","_setAttr","isAuto","attrs","getTextWidth","textWidth","getTextHeight","warn","textHeight","_c","_d","_e","_f","_g","_h","_j","_k","_l","_context","font","measureText","scaleFactor","actualBoundingBoxLeft","actualBoundingBoxRight","alphabeticBaseline","emHeightAscent","emHeightDescent","hangingBaseline","ideographicBaseline","fontStyle","fontVariant","_addTextLine","_getTextWidth","lines","fixedWidth","fixedHeight","maxWidth","maxHeightPx","currentHeightPx","wrap","shouldWrap","wrapAtWord","shouldAddEllipsis","ellipsis","additionalWidth","i","max","low","high","match","matchWidth","mid","lineArray","substr","substrWidth","shouldConsiderEllipsis","effectiveWidth","matchArray","nextIsSpaceOrDash","wrapIndex","lastSpaceIndex","lastIndexOf","lastDashIndex","trimRight","shouldHandleEllipsis","_shouldHandleEllipsis","_tryToAddEllipsisToLastLine","trimLeft","haveSpace","splice","getStrokeScaleEnabled","_useBufferCanvas","hasLine","hasShadow","prototype","className","_attrsAffectingSize","overWriteSetter","addGetterSetter"],"sources":["C:/Users/91822/Piyush/Desktop/Week -6/matty-project/client/node_modules/konva/lib/shapes/Text.js"],"sourcesContent":["import { Util } from \"../Util.js\";\nimport { Factory } from \"../Factory.js\";\nimport { Shape } from \"../Shape.js\";\nimport { Konva } from \"../Global.js\";\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator, } from \"../Validators.js\";\nimport { _registerNode } from \"../Global.js\";\nexport function stringToArray(string) {\n    return [...string].reduce((acc, char, index, array) => {\n        if (/\\p{Emoji}/u.test(char)) {\n            const nextChar = array[index + 1];\n            if (nextChar && /\\p{Emoji_Modifier}|\\u200D/u.test(nextChar)) {\n                acc.push(char + nextChar);\n                array[index + 1] = '';\n            }\n            else {\n                acc.push(char);\n            }\n        }\n        else if (/\\p{Regional_Indicator}{2}/u.test(char + (array[index + 1] || ''))) {\n            acc.push(char + array[index + 1]);\n        }\n        else if (index > 0 && /\\p{Mn}|\\p{Me}|\\p{Mc}/u.test(char)) {\n            acc[acc.length - 1] += char;\n        }\n        else if (char) {\n            acc.push(char);\n        }\n        return acc;\n    }, []);\n}\nconst AUTO = 'auto', CENTER = 'center', INHERIT = 'inherit', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', RTL = 'rtl', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\n    'direction',\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing',\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n    return fontFamily\n        .split(',')\n        .map((family) => {\n        family = family.trim();\n        const hasSpace = family.indexOf(' ') >= 0;\n        const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n        if (hasSpace && !hasQuotes) {\n            family = `\"${family}\"`;\n        }\n        return family;\n    })\n        .join(', ');\n}\nlet dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.setAttr('miterLimit', 2);\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nexport class Text extends Shape {\n    constructor(config) {\n        super(checkDefaultFill(config));\n        this._partialTextX = 0;\n        this._partialTextY = 0;\n        for (let n = 0; n < attrChangeListLen; n++) {\n            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n        }\n        this._setTextData();\n    }\n    _sceneFunc(context) {\n        var _a, _b;\n        const textArr = this.textArr, textArrLen = textArr.length;\n        if (!this.text()) {\n            return;\n        }\n        let padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), direction = this.direction(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), charRenderFunc = this.charRenderFunc(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        direction = direction === INHERIT ? context.direction : direction;\n        let translateY = lineHeightPx / 2;\n        let baseline = MIDDLE;\n        if (!Konva.legacyTextRendering) {\n            const metrics = this.measureSize('M');\n            baseline = 'alphabetic';\n            const ascent = (_a = metrics.fontBoundingBoxAscent) !== null && _a !== void 0 ? _a : metrics.actualBoundingBoxAscent;\n            const descent = (_b = metrics.fontBoundingBoxDescent) !== null && _b !== void 0 ? _b : metrics.actualBoundingBoxDescent;\n            translateY = (ascent - descent) / 2 + lineHeightPx / 2;\n        }\n        if (direction === RTL) {\n            context.setAttr('direction', direction);\n        }\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', baseline);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            let lineTranslateX = 0;\n            let lineTranslateY = 0;\n            const obj = textArr[n], text = obj.text, width = obj.width, lastLine = obj.lastInParagraph;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                const yOffset = !Konva.legacyTextRendering\n                    ? Math.round(fontSize / 4)\n                    : Math.round(fontSize / 2);\n                const x = lineTranslateX;\n                const y = translateY + lineTranslateY + yOffset;\n                context.moveTo(x, y);\n                const lineWidth = align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n                context.lineTo(x + Math.round(lineWidth), y);\n                context.lineWidth = fontSize / 15;\n                const gradient = this._getLinearGradient();\n                context.strokeStyle = gradient || fill;\n                context.stroke();\n                context.restore();\n            }\n            if (direction !== RTL &&\n                (letterSpacing !== 0 || align === JUSTIFY || charRenderFunc)) {\n                const spacesNumber = text.split(' ').length - 1;\n                const array = stringToArray(text);\n                for (let li = 0; li < array.length; li++) {\n                    const letter = array[li];\n                    if (letter === ' ' && !lastLine && align === JUSTIFY) {\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    if (charRenderFunc) {\n                        context.save();\n                        const previousLines = textArr.slice(0, n);\n                        const previousGraphemes = previousLines.reduce((acc, line) => acc + stringToArray(line.text).length, 0);\n                        const charIndex = li + previousGraphemes;\n                        charRenderFunc({\n                            char: letter,\n                            index: charIndex,\n                            x: lineTranslateX,\n                            y: translateY + lineTranslateY,\n                            lineIndex: n,\n                            column: li,\n                            isLastInLine: lastLine,\n                            width: this.measureSize(letter).width,\n                            context,\n                        });\n                    }\n                    context.fillStrokeShape(this);\n                    if (charRenderFunc) {\n                        context.restore();\n                    }\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\n                }\n            }\n            else {\n                if (letterSpacing !== 0) {\n                    context.setAttr('letterSpacing', `${letterSpacing}px`);\n                }\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                const yOffset = !Konva.legacyTextRendering\n                    ? -Math.round(fontSize / 4)\n                    : 0;\n                const x = align === JUSTIFY ? 0 : lineTranslateX;\n                context.moveTo(x, translateY + lineTranslateY + yOffset);\n                const lineWidth = align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;\n                context.lineTo(x + Math.round(lineWidth), translateY + lineTranslateY + yOffset);\n                context.lineWidth = fontSize / 15;\n                const gradient = this._getLinearGradient();\n                context.strokeStyle = gradient || fill;\n                context.stroke();\n                context.restore();\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    }\n    _hitFunc(context) {\n        const width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    setText(text) {\n        const str = Util._isString(text)\n            ? text\n            : text === null || text === undefined\n                ? ''\n                : text + '';\n        this._setAttr(TEXT, str);\n        return this;\n    }\n    getWidth() {\n        const isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n    getHeight() {\n        const isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    measureSize(text) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        let _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        const scaleFactor = fontSize / 100;\n        return {\n            actualBoundingBoxAscent: (_a = metrics.actualBoundingBoxAscent) !== null && _a !== void 0 ? _a : 71.58203125 * scaleFactor,\n            actualBoundingBoxDescent: (_b = metrics.actualBoundingBoxDescent) !== null && _b !== void 0 ? _b : 0,\n            actualBoundingBoxLeft: (_c = metrics.actualBoundingBoxLeft) !== null && _c !== void 0 ? _c : -7.421875 * scaleFactor,\n            actualBoundingBoxRight: (_d = metrics.actualBoundingBoxRight) !== null && _d !== void 0 ? _d : 75.732421875 * scaleFactor,\n            alphabeticBaseline: (_e = metrics.alphabeticBaseline) !== null && _e !== void 0 ? _e : 0,\n            emHeightAscent: (_f = metrics.emHeightAscent) !== null && _f !== void 0 ? _f : 100 * scaleFactor,\n            emHeightDescent: (_g = metrics.emHeightDescent) !== null && _g !== void 0 ? _g : -20 * scaleFactor,\n            fontBoundingBoxAscent: (_h = metrics.fontBoundingBoxAscent) !== null && _h !== void 0 ? _h : 91 * scaleFactor,\n            fontBoundingBoxDescent: (_j = metrics.fontBoundingBoxDescent) !== null && _j !== void 0 ? _j : 21 * scaleFactor,\n            hangingBaseline: (_k = metrics.hangingBaseline) !== null && _k !== void 0 ? _k : 72.80000305175781 * scaleFactor,\n            ideographicBaseline: (_l = metrics.ideographicBaseline) !== null && _l !== void 0 ? _l : -21 * scaleFactor,\n            width: metrics.width,\n            height: fontSize,\n        };\n    }\n    _getContextFont() {\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            (this.fontSize() + PX_SPACE) +\n            normalizeFontFamily(this.fontFamily()));\n    }\n    _addTextLine(line) {\n        const align = this.align();\n        if (align === JUSTIFY) {\n            line = line.trim();\n        }\n        const width = this._getTextWidth(line);\n        return this.textArr.push({\n            text: line,\n            width: width,\n            lastInParagraph: false,\n        });\n    }\n    _getTextWidth(text) {\n        const letterSpacing = this.letterSpacing();\n        const length = text.length;\n        return getDummyContext().measureText(text).width + letterSpacing * length;\n    }\n    _setTextData() {\n        let lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        const additionalWidth = shouldAddEllipsis\n            ? this._getTextWidth(ELLIPSIS)\n            : 0;\n        for (let i = 0, max = lines.length; i < max; ++i) {\n            let line = lines[i];\n            let lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    let low = 0, high = stringToArray(line).length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        const mid = (low + high) >>> 1, lineArray = stringToArray(line), substr = lineArray.slice(0, mid + 1).join(''), substrWidth = this._getTextWidth(substr);\n                        const shouldConsiderEllipsis = shouldAddEllipsis &&\n                            fixedHeight &&\n                            currentHeightPx + lineHeightPx > maxHeightPx;\n                        const effectiveWidth = shouldConsiderEllipsis\n                            ? substrWidth + additionalWidth\n                            : substrWidth;\n                        if (effectiveWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr;\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            const lineArray = stringToArray(line);\n                            const matchArray = stringToArray(match);\n                            const nextChar = lineArray[matchArray.length];\n                            const nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            let wrapIndex;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = matchArray.length;\n                            }\n                            else {\n                                const lastSpaceIndex = matchArray.lastIndexOf(SPACE);\n                                const lastDashIndex = matchArray.lastIndexOf(DASH);\n                                wrapIndex = Math.max(lastSpaceIndex, lastDashIndex) + 1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = lineArray.slice(0, low).join('');\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        const shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);\n                        if (shouldHandleEllipsis) {\n                            this._tryToAddEllipsisToLastLine();\n                            break;\n                        }\n                        const lineArray = stringToArray(line);\n                        line = lineArray.slice(low).join('').trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n                if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {\n                    this._tryToAddEllipsisToLastLine();\n                }\n            }\n            if (this.textArr[this.textArr.length - 1]) {\n                this.textArr[this.textArr.length - 1].lastInParagraph = true;\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    }\n    _shouldHandleEllipsis(currentHeightPx) {\n        const fontSize = +this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, height = this.attrs.height, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxHeightPx = height - padding * 2, wrap = this.wrap(), shouldWrap = wrap !== NONE;\n        return (!shouldWrap ||\n            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx));\n    }\n    _tryToAddEllipsisToLastLine() {\n        const width = this.attrs.width, fixedWidth = width !== AUTO && width !== undefined, padding = this.padding(), maxWidth = width - padding * 2, shouldAddEllipsis = this.ellipsis();\n        const lastLine = this.textArr[this.textArr.length - 1];\n        if (!lastLine || !shouldAddEllipsis) {\n            return;\n        }\n        if (fixedWidth) {\n            const haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n            if (!haveSpace) {\n                lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n            }\n        }\n        this.textArr.splice(this.textArr.length - 1, 1);\n        this._addTextLine(lastLine.text + ELLIPSIS);\n    }\n    getStrokeScaleEnabled() {\n        return true;\n    }\n    _useBufferCanvas() {\n        const hasLine = this.textDecoration().indexOf('underline') !== -1 ||\n            this.textDecoration().indexOf('line-through') !== -1;\n        const hasShadow = this.hasShadow();\n        if (hasLine && hasShadow) {\n            return true;\n        }\n        return super._useBufferCanvas();\n    }\n}\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight',\n    'letterSpacing',\n];\n_registerNode(Text);\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'direction', INHERIT);\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');\nFactory.addGetterSetter(Text, 'charRenderFunc', undefined);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}