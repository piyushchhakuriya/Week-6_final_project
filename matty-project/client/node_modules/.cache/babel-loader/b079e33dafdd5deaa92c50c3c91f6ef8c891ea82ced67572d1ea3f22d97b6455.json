{"ast":null,"code":"import { Util } from \"../Util.js\";\nimport { Factory } from \"../Factory.js\";\nimport { Shape } from \"../Shape.js\";\nimport { Path } from \"./Path.js\";\nimport { Text, stringToArray } from \"./Text.js\";\nimport { getNumberValidator } from \"../Validators.js\";\nimport { _registerNode } from \"../Global.js\";\nconst EMPTY_STRING = '',\n  NORMAL = 'normal';\nfunction _fillFunc(context) {\n  context.fillText(this.partialText, 0, 0);\n}\nfunction _strokeFunc(context) {\n  context.strokeText(this.partialText, 0, 0);\n}\nexport class TextPath extends Shape {\n  constructor(config) {\n    super(config);\n    this.dummyCanvas = Util.createCanvasElement();\n    this.dataArray = [];\n    this._readDataAttribute();\n    this.on('dataChange.konva', function () {\n      this._readDataAttribute();\n      this._setTextData();\n    });\n    this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', this._setTextData);\n    this._setTextData();\n  }\n  _getTextPathLength() {\n    return Path.getPathLength(this.dataArray);\n  }\n  _getPointAtLength(length) {\n    if (!this.attrs.data) {\n      return null;\n    }\n    const totalLength = this.pathLength;\n    if (length > totalLength) {\n      return null;\n    }\n    return Path.getPointAtLengthOfDataArray(length, this.dataArray);\n  }\n  _readDataAttribute() {\n    this.dataArray = Path.parsePathData(this.attrs.data);\n    this.pathLength = this._getTextPathLength();\n  }\n  _sceneFunc(context) {\n    context.setAttr('font', this._getContextFont());\n    context.setAttr('textBaseline', this.textBaseline());\n    context.setAttr('textAlign', 'left');\n    context.save();\n    const textDecoration = this.textDecoration();\n    const fill = this.fill();\n    const fontSize = this.fontSize();\n    const glyphInfo = this.glyphInfo;\n    if (textDecoration === 'underline') {\n      context.beginPath();\n    }\n    for (let i = 0; i < glyphInfo.length; i++) {\n      context.save();\n      const p0 = glyphInfo[i].p0;\n      context.translate(p0.x, p0.y);\n      context.rotate(glyphInfo[i].rotation);\n      this.partialText = glyphInfo[i].text;\n      context.fillStrokeShape(this);\n      if (textDecoration === 'underline') {\n        if (i === 0) {\n          context.moveTo(0, fontSize / 2 + 1);\n        }\n        context.lineTo(fontSize, fontSize / 2 + 1);\n      }\n      context.restore();\n    }\n    if (textDecoration === 'underline') {\n      context.strokeStyle = fill;\n      context.lineWidth = fontSize / 20;\n      context.stroke();\n    }\n    context.restore();\n  }\n  _hitFunc(context) {\n    context.beginPath();\n    const glyphInfo = this.glyphInfo;\n    if (glyphInfo.length >= 1) {\n      const p0 = glyphInfo[0].p0;\n      context.moveTo(p0.x, p0.y);\n    }\n    for (let i = 0; i < glyphInfo.length; i++) {\n      const p1 = glyphInfo[i].p1;\n      context.lineTo(p1.x, p1.y);\n    }\n    context.setAttr('lineWidth', this.fontSize());\n    context.setAttr('strokeStyle', this.colorKey);\n    context.stroke();\n  }\n  getTextWidth() {\n    return this.textWidth;\n  }\n  getTextHeight() {\n    Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n    return this.textHeight;\n  }\n  setText(text) {\n    return Text.prototype.setText.call(this, text);\n  }\n  _getContextFont() {\n    return Text.prototype._getContextFont.call(this);\n  }\n  _getTextSize(text) {\n    const dummyCanvas = this.dummyCanvas;\n    const _context = dummyCanvas.getContext('2d');\n    _context.save();\n    _context.font = this._getContextFont();\n    const metrics = _context.measureText(text);\n    _context.restore();\n    return {\n      width: metrics.width,\n      height: parseInt(\"\".concat(this.fontSize()), 10)\n    };\n  }\n  _setTextData() {\n    const charArr = stringToArray(this.text());\n    const chars = [];\n    let width = 0;\n    for (let i = 0; i < charArr.length; i++) {\n      chars.push({\n        char: charArr[i],\n        width: this._getTextSize(charArr[i]).width\n      });\n      width += chars[i].width;\n    }\n    const {\n      height\n    } = this._getTextSize(this.attrs.text);\n    this.textWidth = width;\n    this.textHeight = height;\n    this.glyphInfo = [];\n    if (!this.attrs.data) {\n      return null;\n    }\n    const letterSpacing = this.letterSpacing();\n    const align = this.align();\n    const kerningFunc = this.kerningFunc();\n    const textWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\n    let offset = 0;\n    if (align === 'center') {\n      offset = Math.max(0, this.pathLength / 2 - textWidth / 2);\n    }\n    if (align === 'right') {\n      offset = Math.max(0, this.pathLength - textWidth);\n    }\n    let offsetToGlyph = offset;\n    for (let i = 0; i < chars.length; i++) {\n      const charStartPoint = this._getPointAtLength(offsetToGlyph);\n      if (!charStartPoint) return;\n      const char = chars[i].char;\n      let glyphWidth = chars[i].width + letterSpacing;\n      if (char === ' ' && align === 'justify') {\n        const numberOfSpaces = this.text().split(' ').length - 1;\n        glyphWidth += (this.pathLength - textWidth) / numberOfSpaces;\n      }\n      const charEndPoint = this._getPointAtLength(offsetToGlyph + glyphWidth);\n      if (!charEndPoint) {\n        return;\n      }\n      const width = Path.getLineLength(charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n      let kern = 0;\n      if (kerningFunc) {\n        try {\n          kern = kerningFunc(chars[i - 1].char, char) * this.fontSize();\n        } catch (e) {\n          kern = 0;\n        }\n      }\n      charStartPoint.x += kern;\n      charEndPoint.x += kern;\n      this.textWidth += kern;\n      const midpoint = Path.getPointOnLine(kern + width / 2.0, charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\n      const rotation = Math.atan2(charEndPoint.y - charStartPoint.y, charEndPoint.x - charStartPoint.x);\n      this.glyphInfo.push({\n        transposeX: midpoint.x,\n        transposeY: midpoint.y,\n        text: charArr[i],\n        rotation: rotation,\n        p0: charStartPoint,\n        p1: charEndPoint\n      });\n      offsetToGlyph += glyphWidth;\n    }\n  }\n  getSelfRect() {\n    if (!this.glyphInfo.length) {\n      return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n    const points = [];\n    this.glyphInfo.forEach(function (info) {\n      points.push(info.p0.x);\n      points.push(info.p0.y);\n      points.push(info.p1.x);\n      points.push(info.p1.y);\n    });\n    let minX = points[0] || 0;\n    let maxX = points[0] || 0;\n    let minY = points[1] || 0;\n    let maxY = points[1] || 0;\n    let x, y;\n    for (let i = 0; i < points.length / 2; i++) {\n      x = points[i * 2];\n      y = points[i * 2 + 1];\n      minX = Math.min(minX, x);\n      maxX = Math.max(maxX, x);\n      minY = Math.min(minY, y);\n      maxY = Math.max(maxY, y);\n    }\n    const fontSize = this.fontSize();\n    return {\n      x: minX - fontSize / 2,\n      y: minY - fontSize / 2,\n      width: maxX - minX + fontSize,\n      height: maxY - minY + fontSize\n    };\n  }\n  destroy() {\n    Util.releaseCanvas(this.dummyCanvas);\n    return super.destroy();\n  }\n}\nTextPath.prototype._fillFunc = _fillFunc;\nTextPath.prototype._strokeFunc = _strokeFunc;\nTextPath.prototype._fillFuncHit = _fillFunc;\nTextPath.prototype._strokeFuncHit = _strokeFunc;\nTextPath.prototype.className = 'TextPath';\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\n_registerNode(TextPath);\nFactory.addGetterSetter(TextPath, 'data');\nFactory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\nFactory.addGetterSetter(TextPath, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\nFactory.addGetterSetter(TextPath, 'align', 'left');\nFactory.addGetterSetter(TextPath, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(TextPath, 'textBaseline', 'middle');\nFactory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\nFactory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\nFactory.addGetterSetter(TextPath, 'textDecoration', '');\nFactory.addGetterSetter(TextPath, 'kerningFunc', undefined);","map":{"version":3,"names":["Util","Factory","Shape","Path","Text","stringToArray","getNumberValidator","_registerNode","EMPTY_STRING","NORMAL","_fillFunc","context","fillText","partialText","_strokeFunc","strokeText","TextPath","constructor","config","dummyCanvas","createCanvasElement","dataArray","_readDataAttribute","on","_setTextData","_getTextPathLength","getPathLength","_getPointAtLength","length","attrs","data","totalLength","pathLength","getPointAtLengthOfDataArray","parsePathData","_sceneFunc","setAttr","_getContextFont","textBaseline","save","textDecoration","fill","fontSize","glyphInfo","beginPath","i","p0","translate","x","y","rotate","rotation","text","fillStrokeShape","moveTo","lineTo","restore","strokeStyle","lineWidth","stroke","_hitFunc","p1","colorKey","getTextWidth","textWidth","getTextHeight","warn","textHeight","setText","prototype","call","_getTextSize","_context","getContext","font","metrics","measureText","width","height","parseInt","concat","charArr","chars","push","char","letterSpacing","align","kerningFunc","Math","max","offset","offsetToGlyph","charStartPoint","glyphWidth","numberOfSpaces","split","charEndPoint","getLineLength","kern","e","midpoint","getPointOnLine","atan2","transposeX","transposeY","getSelfRect","points","forEach","info","minX","maxX","minY","maxY","min","destroy","releaseCanvas","_fillFuncHit","_strokeFuncHit","className","_attrsAffectingSize","addGetterSetter","undefined"],"sources":["C:/Users/lenovo pro/Documents/gncipl-6-week/Week-6_final_project/matty-project/client/node_modules/konva/lib/shapes/TextPath.js"],"sourcesContent":["import { Util } from \"../Util.js\";\r\nimport { Factory } from \"../Factory.js\";\r\nimport { Shape } from \"../Shape.js\";\r\nimport { Path } from \"./Path.js\";\r\nimport { Text, stringToArray } from \"./Text.js\";\r\nimport { getNumberValidator } from \"../Validators.js\";\r\nimport { _registerNode } from \"../Global.js\";\r\nconst EMPTY_STRING = '', NORMAL = 'normal';\r\nfunction _fillFunc(context) {\r\n    context.fillText(this.partialText, 0, 0);\r\n}\r\nfunction _strokeFunc(context) {\r\n    context.strokeText(this.partialText, 0, 0);\r\n}\r\nexport class TextPath extends Shape {\r\n    constructor(config) {\r\n        super(config);\r\n        this.dummyCanvas = Util.createCanvasElement();\r\n        this.dataArray = [];\r\n        this._readDataAttribute();\r\n        this.on('dataChange.konva', function () {\r\n            this._readDataAttribute();\r\n            this._setTextData();\r\n        });\r\n        this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', this._setTextData);\r\n        this._setTextData();\r\n    }\r\n    _getTextPathLength() {\r\n        return Path.getPathLength(this.dataArray);\r\n    }\r\n    _getPointAtLength(length) {\r\n        if (!this.attrs.data) {\r\n            return null;\r\n        }\r\n        const totalLength = this.pathLength;\r\n        if (length > totalLength) {\r\n            return null;\r\n        }\r\n        return Path.getPointAtLengthOfDataArray(length, this.dataArray);\r\n    }\r\n    _readDataAttribute() {\r\n        this.dataArray = Path.parsePathData(this.attrs.data);\r\n        this.pathLength = this._getTextPathLength();\r\n    }\r\n    _sceneFunc(context) {\r\n        context.setAttr('font', this._getContextFont());\r\n        context.setAttr('textBaseline', this.textBaseline());\r\n        context.setAttr('textAlign', 'left');\r\n        context.save();\r\n        const textDecoration = this.textDecoration();\r\n        const fill = this.fill();\r\n        const fontSize = this.fontSize();\r\n        const glyphInfo = this.glyphInfo;\r\n        if (textDecoration === 'underline') {\r\n            context.beginPath();\r\n        }\r\n        for (let i = 0; i < glyphInfo.length; i++) {\r\n            context.save();\r\n            const p0 = glyphInfo[i].p0;\r\n            context.translate(p0.x, p0.y);\r\n            context.rotate(glyphInfo[i].rotation);\r\n            this.partialText = glyphInfo[i].text;\r\n            context.fillStrokeShape(this);\r\n            if (textDecoration === 'underline') {\r\n                if (i === 0) {\r\n                    context.moveTo(0, fontSize / 2 + 1);\r\n                }\r\n                context.lineTo(fontSize, fontSize / 2 + 1);\r\n            }\r\n            context.restore();\r\n        }\r\n        if (textDecoration === 'underline') {\r\n            context.strokeStyle = fill;\r\n            context.lineWidth = fontSize / 20;\r\n            context.stroke();\r\n        }\r\n        context.restore();\r\n    }\r\n    _hitFunc(context) {\r\n        context.beginPath();\r\n        const glyphInfo = this.glyphInfo;\r\n        if (glyphInfo.length >= 1) {\r\n            const p0 = glyphInfo[0].p0;\r\n            context.moveTo(p0.x, p0.y);\r\n        }\r\n        for (let i = 0; i < glyphInfo.length; i++) {\r\n            const p1 = glyphInfo[i].p1;\r\n            context.lineTo(p1.x, p1.y);\r\n        }\r\n        context.setAttr('lineWidth', this.fontSize());\r\n        context.setAttr('strokeStyle', this.colorKey);\r\n        context.stroke();\r\n    }\r\n    getTextWidth() {\r\n        return this.textWidth;\r\n    }\r\n    getTextHeight() {\r\n        Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\r\n        return this.textHeight;\r\n    }\r\n    setText(text) {\r\n        return Text.prototype.setText.call(this, text);\r\n    }\r\n    _getContextFont() {\r\n        return Text.prototype._getContextFont.call(this);\r\n    }\r\n    _getTextSize(text) {\r\n        const dummyCanvas = this.dummyCanvas;\r\n        const _context = dummyCanvas.getContext('2d');\r\n        _context.save();\r\n        _context.font = this._getContextFont();\r\n        const metrics = _context.measureText(text);\r\n        _context.restore();\r\n        return {\r\n            width: metrics.width,\r\n            height: parseInt(`${this.fontSize()}`, 10),\r\n        };\r\n    }\r\n    _setTextData() {\r\n        const charArr = stringToArray(this.text());\r\n        const chars = [];\r\n        let width = 0;\r\n        for (let i = 0; i < charArr.length; i++) {\r\n            chars.push({\r\n                char: charArr[i],\r\n                width: this._getTextSize(charArr[i]).width,\r\n            });\r\n            width += chars[i].width;\r\n        }\r\n        const { height } = this._getTextSize(this.attrs.text);\r\n        this.textWidth = width;\r\n        this.textHeight = height;\r\n        this.glyphInfo = [];\r\n        if (!this.attrs.data) {\r\n            return null;\r\n        }\r\n        const letterSpacing = this.letterSpacing();\r\n        const align = this.align();\r\n        const kerningFunc = this.kerningFunc();\r\n        const textWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);\r\n        let offset = 0;\r\n        if (align === 'center') {\r\n            offset = Math.max(0, this.pathLength / 2 - textWidth / 2);\r\n        }\r\n        if (align === 'right') {\r\n            offset = Math.max(0, this.pathLength - textWidth);\r\n        }\r\n        let offsetToGlyph = offset;\r\n        for (let i = 0; i < chars.length; i++) {\r\n            const charStartPoint = this._getPointAtLength(offsetToGlyph);\r\n            if (!charStartPoint)\r\n                return;\r\n            const char = chars[i].char;\r\n            let glyphWidth = chars[i].width + letterSpacing;\r\n            if (char === ' ' && align === 'justify') {\r\n                const numberOfSpaces = this.text().split(' ').length - 1;\r\n                glyphWidth += (this.pathLength - textWidth) / numberOfSpaces;\r\n            }\r\n            const charEndPoint = this._getPointAtLength(offsetToGlyph + glyphWidth);\r\n            if (!charEndPoint) {\r\n                return;\r\n            }\r\n            const width = Path.getLineLength(charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\r\n            let kern = 0;\r\n            if (kerningFunc) {\r\n                try {\r\n                    kern = kerningFunc(chars[i - 1].char, char) * this.fontSize();\r\n                }\r\n                catch (e) {\r\n                    kern = 0;\r\n                }\r\n            }\r\n            charStartPoint.x += kern;\r\n            charEndPoint.x += kern;\r\n            this.textWidth += kern;\r\n            const midpoint = Path.getPointOnLine(kern + width / 2.0, charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);\r\n            const rotation = Math.atan2(charEndPoint.y - charStartPoint.y, charEndPoint.x - charStartPoint.x);\r\n            this.glyphInfo.push({\r\n                transposeX: midpoint.x,\r\n                transposeY: midpoint.y,\r\n                text: charArr[i],\r\n                rotation: rotation,\r\n                p0: charStartPoint,\r\n                p1: charEndPoint,\r\n            });\r\n            offsetToGlyph += glyphWidth;\r\n        }\r\n    }\r\n    getSelfRect() {\r\n        if (!this.glyphInfo.length) {\r\n            return {\r\n                x: 0,\r\n                y: 0,\r\n                width: 0,\r\n                height: 0,\r\n            };\r\n        }\r\n        const points = [];\r\n        this.glyphInfo.forEach(function (info) {\r\n            points.push(info.p0.x);\r\n            points.push(info.p0.y);\r\n            points.push(info.p1.x);\r\n            points.push(info.p1.y);\r\n        });\r\n        let minX = points[0] || 0;\r\n        let maxX = points[0] || 0;\r\n        let minY = points[1] || 0;\r\n        let maxY = points[1] || 0;\r\n        let x, y;\r\n        for (let i = 0; i < points.length / 2; i++) {\r\n            x = points[i * 2];\r\n            y = points[i * 2 + 1];\r\n            minX = Math.min(minX, x);\r\n            maxX = Math.max(maxX, x);\r\n            minY = Math.min(minY, y);\r\n            maxY = Math.max(maxY, y);\r\n        }\r\n        const fontSize = this.fontSize();\r\n        return {\r\n            x: minX - fontSize / 2,\r\n            y: minY - fontSize / 2,\r\n            width: maxX - minX + fontSize,\r\n            height: maxY - minY + fontSize,\r\n        };\r\n    }\r\n    destroy() {\r\n        Util.releaseCanvas(this.dummyCanvas);\r\n        return super.destroy();\r\n    }\r\n}\r\nTextPath.prototype._fillFunc = _fillFunc;\r\nTextPath.prototype._strokeFunc = _strokeFunc;\r\nTextPath.prototype._fillFuncHit = _fillFunc;\r\nTextPath.prototype._strokeFuncHit = _strokeFunc;\r\nTextPath.prototype.className = 'TextPath';\r\nTextPath.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];\r\n_registerNode(TextPath);\r\nFactory.addGetterSetter(TextPath, 'data');\r\nFactory.addGetterSetter(TextPath, 'fontFamily', 'Arial');\r\nFactory.addGetterSetter(TextPath, 'fontSize', 12, getNumberValidator());\r\nFactory.addGetterSetter(TextPath, 'fontStyle', NORMAL);\r\nFactory.addGetterSetter(TextPath, 'align', 'left');\r\nFactory.addGetterSetter(TextPath, 'letterSpacing', 0, getNumberValidator());\r\nFactory.addGetterSetter(TextPath, 'textBaseline', 'middle');\r\nFactory.addGetterSetter(TextPath, 'fontVariant', NORMAL);\r\nFactory.addGetterSetter(TextPath, 'text', EMPTY_STRING);\r\nFactory.addGetterSetter(TextPath, 'textDecoration', '');\r\nFactory.addGetterSetter(TextPath, 'kerningFunc', undefined);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}