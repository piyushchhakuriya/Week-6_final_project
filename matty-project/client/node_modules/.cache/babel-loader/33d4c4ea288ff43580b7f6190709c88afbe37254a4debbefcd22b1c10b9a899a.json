{"ast":null,"code":"import axios from 'axios';\n\n// Optional helper for fetch-based calls\nexport function getAuthHeaders() {\n  const token = localStorage.getItem('token');\n  if (!token) return {};\n  return {\n    Authorization: `Bearer ${token}`\n  };\n}\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nconst API = axios.create({\n  baseURL: \"http://localhost:5000/api\"\n});\n\n// Add authAPI export (make sure your login/register endpoints match)\nexport const authAPI = {\n  login: async ({\n    email,\n    password\n  }) => {\n    const res = await API.post('/auth/login', {\n      email,\n      password\n    });\n    return res.data;\n  }\n  // You can add more functions as needed\n};\n\n// Add tokenManager export with the needed methods\nexport const tokenManager = {\n  setToken: token => localStorage.setItem('token', token),\n  getToken: () => localStorage.getItem('token'),\n  clearToken: () => localStorage.removeItem('token'),\n  clearAuth: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // other auth cleanup if needed\n  }\n};\nexport default API;","map":{"version":3,"names":["axios","getAuthHeaders","token","localStorage","getItem","Authorization","API","interceptors","request","use","config","headers","create","baseURL","authAPI","login","email","password","res","post","data","tokenManager","setToken","setItem","getToken","clearToken","removeItem","clearAuth"],"sources":["C:/Users/Kritika Ekka/Week-6_final_project/matty-project/client/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Optional helper for fetch-based calls\r\nexport function getAuthHeaders() {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) return {};\r\n  return { Authorization: `Bearer ${token}` };\r\n}\r\n\r\n\r\nAPI.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n\r\n\r\nconst API = axios.create({\r\n  baseURL: \"http://localhost:5000/api\"\r\n});\r\n\r\n\r\n// Add authAPI export (make sure your login/register endpoints match)\r\nexport const authAPI = {\r\n  login: async ({ email, password }) => {\r\n    const res = await API.post('/auth/login', { email, password });\r\n    return res.data;\r\n  },\r\n  // You can add more functions as needed\r\n};\r\n\r\n// Add tokenManager export with the needed methods\r\nexport const tokenManager = {\r\n  setToken: (token) => localStorage.setItem('token', token),\r\n  getToken: () => localStorage.getItem('token'),\r\n  clearToken: () => localStorage.removeItem('token'),\r\n  clearAuth: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    // other auth cleanup if needed\r\n  }\r\n};\r\n\r\nexport default API;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,SAASC,cAAcA,CAAA,EAAG;EAC/B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACF,KAAK,EAAE,OAAO,CAAC,CAAC;EACrB,OAAO;IAAEG,aAAa,EAAE,UAAUH,KAAK;EAAG,CAAC;AAC7C;AAGAI,GAAG,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTQ,MAAM,CAACC,OAAO,CAACN,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOQ,MAAM;AACf,CAAC,CAAC;AAIF,MAAMJ,GAAG,GAAGN,KAAK,CAACY,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAGF;AACA,OAAO,MAAMC,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAAA,CAAO;IAAEC,KAAK;IAAEC;EAAS,CAAC,KAAK;IACpC,MAAMC,GAAG,GAAG,MAAMZ,GAAG,CAACa,IAAI,CAAC,aAAa,EAAE;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC9D,OAAOC,GAAG,CAACE,IAAI;EACjB;EACA;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG;EAC1BC,QAAQ,EAAGpB,KAAK,IAAKC,YAAY,CAACoB,OAAO,CAAC,OAAO,EAAErB,KAAK,CAAC;EACzDsB,QAAQ,EAAEA,CAAA,KAAMrB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC7CqB,UAAU,EAAEA,CAAA,KAAMtB,YAAY,CAACuB,UAAU,CAAC,OAAO,CAAC;EAClDC,SAAS,EAAEA,CAAA,KAAM;IACfxB,YAAY,CAACuB,UAAU,CAAC,OAAO,CAAC;IAChCvB,YAAY,CAACuB,UAAU,CAAC,MAAM,CAAC;IAC/B;EACF;AACF,CAAC;AAED,eAAepB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}