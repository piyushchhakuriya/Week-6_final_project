{"ast":null,"code":"import { Factory } from \"../Factory.js\";\nimport { Node } from \"../Node.js\";\nimport { getNumberValidator } from \"../Validators.js\";\nfunction remap(fromValue, fromMin, fromMax, toMin, toMax) {\n  const fromRange = fromMax - fromMin,\n    toRange = toMax - toMin;\n  if (fromRange === 0) {\n    return toMin + toRange / 2;\n  }\n  if (toRange === 0) {\n    return toMin;\n  }\n  let toValue = (fromValue - fromMin) / fromRange;\n  toValue = toRange * toValue + toMin;\n  return toValue;\n}\nexport const Enhance = function (imageData) {\n  const data = imageData.data,\n    nSubPixels = data.length;\n  let rMin = data[0],\n    rMax = rMin,\n    r,\n    gMin = data[1],\n    gMax = gMin,\n    g,\n    bMin = data[2],\n    bMax = bMin,\n    b;\n  const enhanceAmount = this.enhance();\n  if (enhanceAmount === 0) {\n    return;\n  }\n  for (let i = 0; i < nSubPixels; i += 4) {\n    r = data[i + 0];\n    if (r < rMin) {\n      rMin = r;\n    } else if (r > rMax) {\n      rMax = r;\n    }\n    g = data[i + 1];\n    if (g < gMin) {\n      gMin = g;\n    } else if (g > gMax) {\n      gMax = g;\n    }\n    b = data[i + 2];\n    if (b < bMin) {\n      bMin = b;\n    } else if (b > bMax) {\n      bMax = b;\n    }\n  }\n  if (rMax === rMin) {\n    rMax = 255;\n    rMin = 0;\n  }\n  if (gMax === gMin) {\n    gMax = 255;\n    gMin = 0;\n  }\n  if (bMax === bMin) {\n    bMax = 255;\n    bMin = 0;\n  }\n  let rGoalMax, rGoalMin, gGoalMax, gGoalMin, bGoalMax, bGoalMin;\n  if (enhanceAmount > 0) {\n    rGoalMax = rMax + enhanceAmount * (255 - rMax);\n    rGoalMin = rMin - enhanceAmount * (rMin - 0);\n    gGoalMax = gMax + enhanceAmount * (255 - gMax);\n    gGoalMin = gMin - enhanceAmount * (gMin - 0);\n    bGoalMax = bMax + enhanceAmount * (255 - bMax);\n    bGoalMin = bMin - enhanceAmount * (bMin - 0);\n  } else {\n    const rMid = (rMax + rMin) * 0.5;\n    rGoalMax = rMax + enhanceAmount * (rMax - rMid);\n    rGoalMin = rMin + enhanceAmount * (rMin - rMid);\n    const gMid = (gMax + gMin) * 0.5;\n    gGoalMax = gMax + enhanceAmount * (gMax - gMid);\n    gGoalMin = gMin + enhanceAmount * (gMin - gMid);\n    const bMid = (bMax + bMin) * 0.5;\n    bGoalMax = bMax + enhanceAmount * (bMax - bMid);\n    bGoalMin = bMin + enhanceAmount * (bMin - bMid);\n  }\n  for (let i = 0; i < nSubPixels; i += 4) {\n    data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);\n    data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);\n    data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);\n  }\n};\nFactory.addGetterSetter(Node, 'enhance', 0, getNumberValidator(), Factory.afterSetFilter);","map":{"version":3,"names":["Factory","Node","getNumberValidator","remap","fromValue","fromMin","fromMax","toMin","toMax","fromRange","toRange","toValue","Enhance","imageData","data","nSubPixels","length","rMin","rMax","r","gMin","gMax","g","bMin","bMax","b","enhanceAmount","enhance","i","rGoalMax","rGoalMin","gGoalMax","gGoalMin","bGoalMax","bGoalMin","rMid","gMid","bMid","addGetterSetter","afterSetFilter"],"sources":["C:/Users/lenovo pro/Documents/gncipl-6-week/Week-6_final_project/matty-project/client/node_modules/konva/lib/filters/Enhance.js"],"sourcesContent":["import { Factory } from \"../Factory.js\";\r\nimport { Node } from \"../Node.js\";\r\nimport { getNumberValidator } from \"../Validators.js\";\r\nfunction remap(fromValue, fromMin, fromMax, toMin, toMax) {\r\n    const fromRange = fromMax - fromMin, toRange = toMax - toMin;\r\n    if (fromRange === 0) {\r\n        return toMin + toRange / 2;\r\n    }\r\n    if (toRange === 0) {\r\n        return toMin;\r\n    }\r\n    let toValue = (fromValue - fromMin) / fromRange;\r\n    toValue = toRange * toValue + toMin;\r\n    return toValue;\r\n}\r\nexport const Enhance = function (imageData) {\r\n    const data = imageData.data, nSubPixels = data.length;\r\n    let rMin = data[0], rMax = rMin, r, gMin = data[1], gMax = gMin, g, bMin = data[2], bMax = bMin, b;\r\n    const enhanceAmount = this.enhance();\r\n    if (enhanceAmount === 0) {\r\n        return;\r\n    }\r\n    for (let i = 0; i < nSubPixels; i += 4) {\r\n        r = data[i + 0];\r\n        if (r < rMin) {\r\n            rMin = r;\r\n        }\r\n        else if (r > rMax) {\r\n            rMax = r;\r\n        }\r\n        g = data[i + 1];\r\n        if (g < gMin) {\r\n            gMin = g;\r\n        }\r\n        else if (g > gMax) {\r\n            gMax = g;\r\n        }\r\n        b = data[i + 2];\r\n        if (b < bMin) {\r\n            bMin = b;\r\n        }\r\n        else if (b > bMax) {\r\n            bMax = b;\r\n        }\r\n    }\r\n    if (rMax === rMin) {\r\n        rMax = 255;\r\n        rMin = 0;\r\n    }\r\n    if (gMax === gMin) {\r\n        gMax = 255;\r\n        gMin = 0;\r\n    }\r\n    if (bMax === bMin) {\r\n        bMax = 255;\r\n        bMin = 0;\r\n    }\r\n    let rGoalMax, rGoalMin, gGoalMax, gGoalMin, bGoalMax, bGoalMin;\r\n    if (enhanceAmount > 0) {\r\n        rGoalMax = rMax + enhanceAmount * (255 - rMax);\r\n        rGoalMin = rMin - enhanceAmount * (rMin - 0);\r\n        gGoalMax = gMax + enhanceAmount * (255 - gMax);\r\n        gGoalMin = gMin - enhanceAmount * (gMin - 0);\r\n        bGoalMax = bMax + enhanceAmount * (255 - bMax);\r\n        bGoalMin = bMin - enhanceAmount * (bMin - 0);\r\n    }\r\n    else {\r\n        const rMid = (rMax + rMin) * 0.5;\r\n        rGoalMax = rMax + enhanceAmount * (rMax - rMid);\r\n        rGoalMin = rMin + enhanceAmount * (rMin - rMid);\r\n        const gMid = (gMax + gMin) * 0.5;\r\n        gGoalMax = gMax + enhanceAmount * (gMax - gMid);\r\n        gGoalMin = gMin + enhanceAmount * (gMin - gMid);\r\n        const bMid = (bMax + bMin) * 0.5;\r\n        bGoalMax = bMax + enhanceAmount * (bMax - bMid);\r\n        bGoalMin = bMin + enhanceAmount * (bMin - bMid);\r\n    }\r\n    for (let i = 0; i < nSubPixels; i += 4) {\r\n        data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);\r\n        data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);\r\n        data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);\r\n    }\r\n};\r\nFactory.addGetterSetter(Node, 'enhance', 0, getNumberValidator(), Factory.afterSetFilter);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}