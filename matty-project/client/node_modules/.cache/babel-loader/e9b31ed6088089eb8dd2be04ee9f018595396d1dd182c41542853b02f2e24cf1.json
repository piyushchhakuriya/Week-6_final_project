{"ast":null,"code":"import { Util } from \"./Util.js\";\nimport { Konva } from \"./Global.js\";\nfunction simplifyArray(arr) {\n  const retArr = [],\n    len = arr.length,\n    util = Util;\n  for (let n = 0; n < len; n++) {\n    let val = arr[n];\n    if (util._isNumber(val)) {\n      val = Math.round(val * 1000) / 1000;\n    } else if (!util._isString(val)) {\n      val = val + '';\n    }\n    retArr.push(val);\n  }\n  return retArr;\n}\nconst COMMA = ',',\n  OPEN_PAREN = '(',\n  CLOSE_PAREN = ')',\n  OPEN_PAREN_BRACKET = '([',\n  CLOSE_BRACKET_PAREN = '])',\n  SEMICOLON = ';',\n  DOUBLE_PAREN = '()',\n  EQUALS = '=',\n  CONTEXT_METHODS = ['arc', 'arcTo', 'beginPath', 'bezierCurveTo', 'clearRect', 'clip', 'closePath', 'createLinearGradient', 'createPattern', 'createRadialGradient', 'drawImage', 'ellipse', 'fill', 'fillText', 'getImageData', 'createImageData', 'lineTo', 'moveTo', 'putImageData', 'quadraticCurveTo', 'rect', 'roundRect', 'restore', 'rotate', 'save', 'scale', 'setLineDash', 'setTransform', 'stroke', 'strokeText', 'transform', 'translate'];\nconst CONTEXT_PROPERTIES = ['fillStyle', 'strokeStyle', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'letterSpacing', 'lineCap', 'lineDashOffset', 'lineJoin', 'lineWidth', 'miterLimit', 'direction', 'font', 'textAlign', 'textBaseline', 'globalAlpha', 'globalCompositeOperation', 'imageSmoothingEnabled', 'filter'];\nconst traceArrMax = 100;\nlet _cssFiltersSupported = null;\nexport function isCSSFiltersSupported() {\n  if (_cssFiltersSupported !== null) {\n    return _cssFiltersSupported;\n  }\n  try {\n    const canvas = Util.createCanvasElement();\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      _cssFiltersSupported = false;\n      return false;\n    }\n    return !!ctx && 'filter' in ctx;\n  } catch (e) {\n    _cssFiltersSupported = false;\n    return false;\n  }\n}\nexport class Context {\n  constructor(canvas) {\n    this.canvas = canvas;\n    if (Konva.enableTrace) {\n      this.traceArr = [];\n      this._enableTrace();\n    }\n  }\n  fillShape(shape) {\n    if (shape.fillEnabled()) {\n      this._fill(shape);\n    }\n  }\n  _fill(shape) {}\n  strokeShape(shape) {\n    if (shape.hasStroke()) {\n      this._stroke(shape);\n    }\n  }\n  _stroke(shape) {}\n  fillStrokeShape(shape) {\n    if (shape.attrs.fillAfterStrokeEnabled) {\n      this.strokeShape(shape);\n      this.fillShape(shape);\n    } else {\n      this.fillShape(shape);\n      this.strokeShape(shape);\n    }\n  }\n  getTrace(relaxed, rounded) {\n    let traceArr = this.traceArr,\n      len = traceArr.length,\n      str = '',\n      n,\n      trace,\n      method,\n      args;\n    for (n = 0; n < len; n++) {\n      trace = traceArr[n];\n      method = trace.method;\n      if (method) {\n        args = trace.args;\n        str += method;\n        if (relaxed) {\n          str += DOUBLE_PAREN;\n        } else {\n          if (Util._isArray(args[0])) {\n            str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;\n          } else {\n            if (rounded) {\n              args = args.map(a => typeof a === 'number' ? Math.floor(a) : a);\n            }\n            str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;\n          }\n        }\n      } else {\n        str += trace.property;\n        if (!relaxed) {\n          str += EQUALS + trace.val;\n        }\n      }\n      str += SEMICOLON;\n    }\n    return str;\n  }\n  clearTrace() {\n    this.traceArr = [];\n  }\n  _trace(str) {\n    let traceArr = this.traceArr,\n      len;\n    traceArr.push(str);\n    len = traceArr.length;\n    if (len >= traceArrMax) {\n      traceArr.shift();\n    }\n  }\n  reset() {\n    const pixelRatio = this.getCanvas().getPixelRatio();\n    this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);\n  }\n  getCanvas() {\n    return this.canvas;\n  }\n  clear(bounds) {\n    const canvas = this.getCanvas();\n    if (bounds) {\n      this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);\n    } else {\n      this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);\n    }\n  }\n  _applyLineCap(shape) {\n    const lineCap = shape.attrs.lineCap;\n    if (lineCap) {\n      this.setAttr('lineCap', lineCap);\n    }\n  }\n  _applyOpacity(shape) {\n    const absOpacity = shape.getAbsoluteOpacity();\n    if (absOpacity !== 1) {\n      this.setAttr('globalAlpha', absOpacity);\n    }\n  }\n  _applyLineJoin(shape) {\n    const lineJoin = shape.attrs.lineJoin;\n    if (lineJoin) {\n      this.setAttr('lineJoin', lineJoin);\n    }\n  }\n  _applyMiterLimit(shape) {\n    const miterLimit = shape.attrs.miterLimit;\n    if (miterLimit != null) {\n      this.setAttr('miterLimit', miterLimit);\n    }\n  }\n  setAttr(attr, val) {\n    this._context[attr] = val;\n  }\n  arc(x, y, radius, startAngle, endAngle, counterClockwise) {\n    this._context.arc(x, y, radius, startAngle, endAngle, counterClockwise);\n  }\n  arcTo(x1, y1, x2, y2, radius) {\n    this._context.arcTo(x1, y1, x2, y2, radius);\n  }\n  beginPath() {\n    this._context.beginPath();\n  }\n  bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n    this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n  }\n  clearRect(x, y, width, height) {\n    this._context.clearRect(x, y, width, height);\n  }\n  clip(...args) {\n    this._context.clip.apply(this._context, args);\n  }\n  closePath() {\n    this._context.closePath();\n  }\n  createImageData(width, height) {\n    const a = arguments;\n    if (a.length === 2) {\n      return this._context.createImageData(width, height);\n    } else if (a.length === 1) {\n      return this._context.createImageData(width);\n    }\n  }\n  createLinearGradient(x0, y0, x1, y1) {\n    return this._context.createLinearGradient(x0, y0, x1, y1);\n  }\n  createPattern(image, repetition) {\n    return this._context.createPattern(image, repetition);\n  }\n  createRadialGradient(x0, y0, r0, x1, y1, r1) {\n    return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n  }\n  drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {\n    const a = arguments,\n      _context = this._context;\n    if (a.length === 3) {\n      _context.drawImage(image, sx, sy);\n    } else if (a.length === 5) {\n      _context.drawImage(image, sx, sy, sWidth, sHeight);\n    } else if (a.length === 9) {\n      _context.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n    }\n  }\n  ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise) {\n    this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise);\n  }\n  isPointInPath(x, y, path, fillRule) {\n    if (path) {\n      return this._context.isPointInPath(path, x, y, fillRule);\n    }\n    return this._context.isPointInPath(x, y, fillRule);\n  }\n  fill(...args) {\n    this._context.fill.apply(this._context, args);\n  }\n  fillRect(x, y, width, height) {\n    this._context.fillRect(x, y, width, height);\n  }\n  strokeRect(x, y, width, height) {\n    this._context.strokeRect(x, y, width, height);\n  }\n  fillText(text, x, y, maxWidth) {\n    if (maxWidth) {\n      this._context.fillText(text, x, y, maxWidth);\n    } else {\n      this._context.fillText(text, x, y);\n    }\n  }\n  measureText(text) {\n    return this._context.measureText(text);\n  }\n  getImageData(sx, sy, sw, sh) {\n    return this._context.getImageData(sx, sy, sw, sh);\n  }\n  lineTo(x, y) {\n    this._context.lineTo(x, y);\n  }\n  moveTo(x, y) {\n    this._context.moveTo(x, y);\n  }\n  rect(x, y, width, height) {\n    this._context.rect(x, y, width, height);\n  }\n  roundRect(x, y, width, height, radii) {\n    this._context.roundRect(x, y, width, height, radii);\n  }\n  putImageData(imageData, dx, dy) {\n    this._context.putImageData(imageData, dx, dy);\n  }\n  quadraticCurveTo(cpx, cpy, x, y) {\n    this._context.quadraticCurveTo(cpx, cpy, x, y);\n  }\n  restore() {\n    this._context.restore();\n  }\n  rotate(angle) {\n    this._context.rotate(angle);\n  }\n  save() {\n    this._context.save();\n  }\n  scale(x, y) {\n    this._context.scale(x, y);\n  }\n  setLineDash(segments) {\n    if (this._context.setLineDash) {\n      this._context.setLineDash(segments);\n    } else if ('mozDash' in this._context) {\n      this._context['mozDash'] = segments;\n    } else if ('webkitLineDash' in this._context) {\n      this._context['webkitLineDash'] = segments;\n    }\n  }\n  getLineDash() {\n    return this._context.getLineDash();\n  }\n  setTransform(a, b, c, d, e, f) {\n    this._context.setTransform(a, b, c, d, e, f);\n  }\n  stroke(path2d) {\n    if (path2d) {\n      this._context.stroke(path2d);\n    } else {\n      this._context.stroke();\n    }\n  }\n  strokeText(text, x, y, maxWidth) {\n    this._context.strokeText(text, x, y, maxWidth);\n  }\n  transform(a, b, c, d, e, f) {\n    this._context.transform(a, b, c, d, e, f);\n  }\n  translate(x, y) {\n    this._context.translate(x, y);\n  }\n  _enableTrace() {\n    let that = this,\n      len = CONTEXT_METHODS.length,\n      origSetter = this.setAttr,\n      n,\n      args;\n    const func = function (methodName) {\n      let origMethod = that[methodName],\n        ret;\n      that[methodName] = function () {\n        args = simplifyArray(Array.prototype.slice.call(arguments, 0));\n        ret = origMethod.apply(that, arguments);\n        that._trace({\n          method: methodName,\n          args: args\n        });\n        return ret;\n      };\n    };\n    for (n = 0; n < len; n++) {\n      func(CONTEXT_METHODS[n]);\n    }\n    that.setAttr = function () {\n      origSetter.apply(that, arguments);\n      const prop = arguments[0];\n      let val = arguments[1];\n      if (prop === 'shadowOffsetX' || prop === 'shadowOffsetY' || prop === 'shadowBlur') {\n        val = val / this.canvas.getPixelRatio();\n      }\n      that._trace({\n        property: prop,\n        val: val\n      });\n    };\n  }\n  _applyGlobalCompositeOperation(node) {\n    const op = node.attrs.globalCompositeOperation;\n    const def = !op || op === 'source-over';\n    if (!def) {\n      this.setAttr('globalCompositeOperation', op);\n    }\n  }\n}\nCONTEXT_PROPERTIES.forEach(function (prop) {\n  Object.defineProperty(Context.prototype, prop, {\n    get() {\n      return this._context[prop];\n    },\n    set(val) {\n      this._context[prop] = val;\n    }\n  });\n});\nexport class SceneContext extends Context {\n  constructor(canvas, {\n    willReadFrequently = false\n  } = {}) {\n    super(canvas);\n    this._context = canvas._canvas.getContext('2d', {\n      willReadFrequently\n    });\n  }\n  _fillColor(shape) {\n    const fill = shape.fill();\n    this.setAttr('fillStyle', fill);\n    shape._fillFunc(this);\n  }\n  _fillPattern(shape) {\n    this.setAttr('fillStyle', shape._getFillPattern());\n    shape._fillFunc(this);\n  }\n  _fillLinearGradient(shape) {\n    const grd = shape._getLinearGradient();\n    if (grd) {\n      this.setAttr('fillStyle', grd);\n      shape._fillFunc(this);\n    }\n  }\n  _fillRadialGradient(shape) {\n    const grd = shape._getRadialGradient();\n    if (grd) {\n      this.setAttr('fillStyle', grd);\n      shape._fillFunc(this);\n    }\n  }\n  _fill(shape) {\n    const hasColor = shape.fill(),\n      fillPriority = shape.getFillPriority();\n    if (hasColor && fillPriority === 'color') {\n      this._fillColor(shape);\n      return;\n    }\n    const hasPattern = shape.getFillPatternImage();\n    if (hasPattern && fillPriority === 'pattern') {\n      this._fillPattern(shape);\n      return;\n    }\n    const hasLinearGradient = shape.getFillLinearGradientColorStops();\n    if (hasLinearGradient && fillPriority === 'linear-gradient') {\n      this._fillLinearGradient(shape);\n      return;\n    }\n    const hasRadialGradient = shape.getFillRadialGradientColorStops();\n    if (hasRadialGradient && fillPriority === 'radial-gradient') {\n      this._fillRadialGradient(shape);\n      return;\n    }\n    if (hasColor) {\n      this._fillColor(shape);\n    } else if (hasPattern) {\n      this._fillPattern(shape);\n    } else if (hasLinearGradient) {\n      this._fillLinearGradient(shape);\n    } else if (hasRadialGradient) {\n      this._fillRadialGradient(shape);\n    }\n  }\n  _strokeLinearGradient(shape) {\n    const start = shape.getStrokeLinearGradientStartPoint(),\n      end = shape.getStrokeLinearGradientEndPoint(),\n      colorStops = shape.getStrokeLinearGradientColorStops(),\n      grd = this.createLinearGradient(start.x, start.y, end.x, end.y);\n    if (colorStops) {\n      for (let n = 0; n < colorStops.length; n += 2) {\n        grd.addColorStop(colorStops[n], colorStops[n + 1]);\n      }\n      this.setAttr('strokeStyle', grd);\n    }\n  }\n  _stroke(shape) {\n    const dash = shape.dash(),\n      strokeScaleEnabled = shape.getStrokeScaleEnabled();\n    if (shape.hasStroke()) {\n      if (!strokeScaleEnabled) {\n        this.save();\n        const pixelRatio = this.getCanvas().getPixelRatio();\n        this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      }\n      this._applyLineCap(shape);\n      if (dash && shape.dashEnabled()) {\n        this.setLineDash(dash);\n        this.setAttr('lineDashOffset', shape.dashOffset());\n      }\n      this.setAttr('lineWidth', shape.strokeWidth());\n      if (!shape.getShadowForStrokeEnabled()) {\n        this.setAttr('shadowColor', 'rgba(0,0,0,0)');\n      }\n      const hasLinearGradient = shape.getStrokeLinearGradientColorStops();\n      if (hasLinearGradient) {\n        this._strokeLinearGradient(shape);\n      } else {\n        this.setAttr('strokeStyle', shape.stroke());\n      }\n      shape._strokeFunc(this);\n      if (!strokeScaleEnabled) {\n        this.restore();\n      }\n    }\n  }\n  _applyShadow(shape) {\n    var _a, _b, _c;\n    const color = (_a = shape.getShadowRGBA()) !== null && _a !== void 0 ? _a : 'black',\n      blur = (_b = shape.getShadowBlur()) !== null && _b !== void 0 ? _b : 5,\n      offset = (_c = shape.getShadowOffset()) !== null && _c !== void 0 ? _c : {\n        x: 0,\n        y: 0\n      },\n      scale = shape.getAbsoluteScale(),\n      ratio = this.canvas.getPixelRatio(),\n      scaleX = scale.x * ratio,\n      scaleY = scale.y * ratio;\n    this.setAttr('shadowColor', color);\n    this.setAttr('shadowBlur', blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));\n    this.setAttr('shadowOffsetX', offset.x * scaleX);\n    this.setAttr('shadowOffsetY', offset.y * scaleY);\n  }\n}\nexport class HitContext extends Context {\n  constructor(canvas) {\n    super(canvas);\n    this._context = canvas._canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n  }\n  _fill(shape) {\n    this.save();\n    this.setAttr('fillStyle', shape.colorKey);\n    shape._fillFuncHit(this);\n    this.restore();\n  }\n  strokeShape(shape) {\n    if (shape.hasHitStroke()) {\n      this._stroke(shape);\n    }\n  }\n  _stroke(shape) {\n    if (shape.hasHitStroke()) {\n      const strokeScaleEnabled = shape.getStrokeScaleEnabled();\n      if (!strokeScaleEnabled) {\n        this.save();\n        const pixelRatio = this.getCanvas().getPixelRatio();\n        this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      }\n      this._applyLineCap(shape);\n      const hitStrokeWidth = shape.hitStrokeWidth();\n      const strokeWidth = hitStrokeWidth === 'auto' ? shape.strokeWidth() : hitStrokeWidth;\n      this.setAttr('lineWidth', strokeWidth);\n      this.setAttr('strokeStyle', shape.colorKey);\n      shape._strokeFuncHit(this);\n      if (!strokeScaleEnabled) {\n        this.restore();\n      }\n    }\n  }\n}","map":{"version":3,"names":["Util","Konva","simplifyArray","arr","retArr","len","length","util","n","val","_isNumber","Math","round","_isString","push","COMMA","OPEN_PAREN","CLOSE_PAREN","OPEN_PAREN_BRACKET","CLOSE_BRACKET_PAREN","SEMICOLON","DOUBLE_PAREN","EQUALS","CONTEXT_METHODS","CONTEXT_PROPERTIES","traceArrMax","_cssFiltersSupported","isCSSFiltersSupported","canvas","createCanvasElement","ctx","getContext","e","Context","constructor","enableTrace","traceArr","_enableTrace","fillShape","shape","fillEnabled","_fill","strokeShape","hasStroke","_stroke","fillStrokeShape","attrs","fillAfterStrokeEnabled","getTrace","relaxed","rounded","str","trace","method","args","_isArray","join","map","a","floor","property","clearTrace","_trace","shift","reset","pixelRatio","getCanvas","getPixelRatio","setTransform","clear","bounds","clearRect","x","y","width","height","getWidth","getHeight","_applyLineCap","lineCap","setAttr","_applyOpacity","absOpacity","getAbsoluteOpacity","_applyLineJoin","lineJoin","_applyMiterLimit","miterLimit","attr","_context","arc","radius","startAngle","endAngle","counterClockwise","arcTo","x1","y1","x2","y2","beginPath","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","clip","apply","closePath","createImageData","arguments","createLinearGradient","x0","y0","createPattern","image","repetition","createRadialGradient","r0","r1","drawImage","sx","sy","sWidth","sHeight","dx","dy","dWidth","dHeight","ellipse","radiusX","radiusY","rotation","counterclockwise","isPointInPath","path","fillRule","fill","fillRect","strokeRect","fillText","text","maxWidth","measureText","getImageData","sw","sh","lineTo","moveTo","rect","roundRect","radii","putImageData","imageData","quadraticCurveTo","cpx","cpy","restore","rotate","angle","save","scale","setLineDash","segments","getLineDash","b","c","d","f","stroke","path2d","strokeText","transform","translate","that","origSetter","func","methodName","origMethod","ret","Array","prototype","slice","call","prop","_applyGlobalCompositeOperation","node","op","globalCompositeOperation","def","forEach","Object","defineProperty","get","set","SceneContext","willReadFrequently","_canvas","_fillColor","_fillFunc","_fillPattern","_getFillPattern","_fillLinearGradient","grd","_getLinearGradient","_fillRadialGradient","_getRadialGradient","hasColor","fillPriority","getFillPriority","hasPattern","getFillPatternImage","hasLinearGradient","getFillLinearGradientColorStops","hasRadialGradient","getFillRadialGradientColorStops","_strokeLinearGradient","start","getStrokeLinearGradientStartPoint","end","getStrokeLinearGradientEndPoint","colorStops","getStrokeLinearGradientColorStops","addColorStop","dash","strokeScaleEnabled","getStrokeScaleEnabled","dashEnabled","dashOffset","strokeWidth","getShadowForStrokeEnabled","_strokeFunc","_applyShadow","_a","_b","_c","color","getShadowRGBA","blur","getShadowBlur","offset","getShadowOffset","getAbsoluteScale","ratio","scaleX","scaleY","min","abs","HitContext","colorKey","_fillFuncHit","hasHitStroke","hitStrokeWidth","_strokeFuncHit"],"sources":["C:/Users/lenovo pro/Documents/gncipl-6-week/Week-6_final_project/matty-project/client/node_modules/konva/lib/Context.js"],"sourcesContent":["import { Util } from \"./Util.js\";\r\nimport { Konva } from \"./Global.js\";\r\nfunction simplifyArray(arr) {\r\n    const retArr = [], len = arr.length, util = Util;\r\n    for (let n = 0; n < len; n++) {\r\n        let val = arr[n];\r\n        if (util._isNumber(val)) {\r\n            val = Math.round(val * 1000) / 1000;\r\n        }\r\n        else if (!util._isString(val)) {\r\n            val = val + '';\r\n        }\r\n        retArr.push(val);\r\n    }\r\n    return retArr;\r\n}\r\nconst COMMA = ',', OPEN_PAREN = '(', CLOSE_PAREN = ')', OPEN_PAREN_BRACKET = '([', CLOSE_BRACKET_PAREN = '])', SEMICOLON = ';', DOUBLE_PAREN = '()', EQUALS = '=', CONTEXT_METHODS = [\r\n    'arc',\r\n    'arcTo',\r\n    'beginPath',\r\n    'bezierCurveTo',\r\n    'clearRect',\r\n    'clip',\r\n    'closePath',\r\n    'createLinearGradient',\r\n    'createPattern',\r\n    'createRadialGradient',\r\n    'drawImage',\r\n    'ellipse',\r\n    'fill',\r\n    'fillText',\r\n    'getImageData',\r\n    'createImageData',\r\n    'lineTo',\r\n    'moveTo',\r\n    'putImageData',\r\n    'quadraticCurveTo',\r\n    'rect',\r\n    'roundRect',\r\n    'restore',\r\n    'rotate',\r\n    'save',\r\n    'scale',\r\n    'setLineDash',\r\n    'setTransform',\r\n    'stroke',\r\n    'strokeText',\r\n    'transform',\r\n    'translate',\r\n];\r\nconst CONTEXT_PROPERTIES = [\r\n    'fillStyle',\r\n    'strokeStyle',\r\n    'shadowColor',\r\n    'shadowBlur',\r\n    'shadowOffsetX',\r\n    'shadowOffsetY',\r\n    'letterSpacing',\r\n    'lineCap',\r\n    'lineDashOffset',\r\n    'lineJoin',\r\n    'lineWidth',\r\n    'miterLimit',\r\n    'direction',\r\n    'font',\r\n    'textAlign',\r\n    'textBaseline',\r\n    'globalAlpha',\r\n    'globalCompositeOperation',\r\n    'imageSmoothingEnabled',\r\n    'filter',\r\n];\r\nconst traceArrMax = 100;\r\nlet _cssFiltersSupported = null;\r\nexport function isCSSFiltersSupported() {\r\n    if (_cssFiltersSupported !== null) {\r\n        return _cssFiltersSupported;\r\n    }\r\n    try {\r\n        const canvas = Util.createCanvasElement();\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) {\r\n            _cssFiltersSupported = false;\r\n            return false;\r\n        }\r\n        return !!ctx && 'filter' in ctx;\r\n    }\r\n    catch (e) {\r\n        _cssFiltersSupported = false;\r\n        return false;\r\n    }\r\n}\r\nexport class Context {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        if (Konva.enableTrace) {\r\n            this.traceArr = [];\r\n            this._enableTrace();\r\n        }\r\n    }\r\n    fillShape(shape) {\r\n        if (shape.fillEnabled()) {\r\n            this._fill(shape);\r\n        }\r\n    }\r\n    _fill(shape) {\r\n    }\r\n    strokeShape(shape) {\r\n        if (shape.hasStroke()) {\r\n            this._stroke(shape);\r\n        }\r\n    }\r\n    _stroke(shape) {\r\n    }\r\n    fillStrokeShape(shape) {\r\n        if (shape.attrs.fillAfterStrokeEnabled) {\r\n            this.strokeShape(shape);\r\n            this.fillShape(shape);\r\n        }\r\n        else {\r\n            this.fillShape(shape);\r\n            this.strokeShape(shape);\r\n        }\r\n    }\r\n    getTrace(relaxed, rounded) {\r\n        let traceArr = this.traceArr, len = traceArr.length, str = '', n, trace, method, args;\r\n        for (n = 0; n < len; n++) {\r\n            trace = traceArr[n];\r\n            method = trace.method;\r\n            if (method) {\r\n                args = trace.args;\r\n                str += method;\r\n                if (relaxed) {\r\n                    str += DOUBLE_PAREN;\r\n                }\r\n                else {\r\n                    if (Util._isArray(args[0])) {\r\n                        str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;\r\n                    }\r\n                    else {\r\n                        if (rounded) {\r\n                            args = args.map((a) => typeof a === 'number' ? Math.floor(a) : a);\r\n                        }\r\n                        str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                str += trace.property;\r\n                if (!relaxed) {\r\n                    str += EQUALS + trace.val;\r\n                }\r\n            }\r\n            str += SEMICOLON;\r\n        }\r\n        return str;\r\n    }\r\n    clearTrace() {\r\n        this.traceArr = [];\r\n    }\r\n    _trace(str) {\r\n        let traceArr = this.traceArr, len;\r\n        traceArr.push(str);\r\n        len = traceArr.length;\r\n        if (len >= traceArrMax) {\r\n            traceArr.shift();\r\n        }\r\n    }\r\n    reset() {\r\n        const pixelRatio = this.getCanvas().getPixelRatio();\r\n        this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);\r\n    }\r\n    getCanvas() {\r\n        return this.canvas;\r\n    }\r\n    clear(bounds) {\r\n        const canvas = this.getCanvas();\r\n        if (bounds) {\r\n            this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);\r\n        }\r\n        else {\r\n            this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);\r\n        }\r\n    }\r\n    _applyLineCap(shape) {\r\n        const lineCap = shape.attrs.lineCap;\r\n        if (lineCap) {\r\n            this.setAttr('lineCap', lineCap);\r\n        }\r\n    }\r\n    _applyOpacity(shape) {\r\n        const absOpacity = shape.getAbsoluteOpacity();\r\n        if (absOpacity !== 1) {\r\n            this.setAttr('globalAlpha', absOpacity);\r\n        }\r\n    }\r\n    _applyLineJoin(shape) {\r\n        const lineJoin = shape.attrs.lineJoin;\r\n        if (lineJoin) {\r\n            this.setAttr('lineJoin', lineJoin);\r\n        }\r\n    }\r\n    _applyMiterLimit(shape) {\r\n        const miterLimit = shape.attrs.miterLimit;\r\n        if (miterLimit != null) {\r\n            this.setAttr('miterLimit', miterLimit);\r\n        }\r\n    }\r\n    setAttr(attr, val) {\r\n        this._context[attr] = val;\r\n    }\r\n    arc(x, y, radius, startAngle, endAngle, counterClockwise) {\r\n        this._context.arc(x, y, radius, startAngle, endAngle, counterClockwise);\r\n    }\r\n    arcTo(x1, y1, x2, y2, radius) {\r\n        this._context.arcTo(x1, y1, x2, y2, radius);\r\n    }\r\n    beginPath() {\r\n        this._context.beginPath();\r\n    }\r\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\r\n        this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\r\n    }\r\n    clearRect(x, y, width, height) {\r\n        this._context.clearRect(x, y, width, height);\r\n    }\r\n    clip(...args) {\r\n        this._context.clip.apply(this._context, args);\r\n    }\r\n    closePath() {\r\n        this._context.closePath();\r\n    }\r\n    createImageData(width, height) {\r\n        const a = arguments;\r\n        if (a.length === 2) {\r\n            return this._context.createImageData(width, height);\r\n        }\r\n        else if (a.length === 1) {\r\n            return this._context.createImageData(width);\r\n        }\r\n    }\r\n    createLinearGradient(x0, y0, x1, y1) {\r\n        return this._context.createLinearGradient(x0, y0, x1, y1);\r\n    }\r\n    createPattern(image, repetition) {\r\n        return this._context.createPattern(image, repetition);\r\n    }\r\n    createRadialGradient(x0, y0, r0, x1, y1, r1) {\r\n        return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\r\n    }\r\n    drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {\r\n        const a = arguments, _context = this._context;\r\n        if (a.length === 3) {\r\n            _context.drawImage(image, sx, sy);\r\n        }\r\n        else if (a.length === 5) {\r\n            _context.drawImage(image, sx, sy, sWidth, sHeight);\r\n        }\r\n        else if (a.length === 9) {\r\n            _context.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\r\n        }\r\n    }\r\n    ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise) {\r\n        this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise);\r\n    }\r\n    isPointInPath(x, y, path, fillRule) {\r\n        if (path) {\r\n            return this._context.isPointInPath(path, x, y, fillRule);\r\n        }\r\n        return this._context.isPointInPath(x, y, fillRule);\r\n    }\r\n    fill(...args) {\r\n        this._context.fill.apply(this._context, args);\r\n    }\r\n    fillRect(x, y, width, height) {\r\n        this._context.fillRect(x, y, width, height);\r\n    }\r\n    strokeRect(x, y, width, height) {\r\n        this._context.strokeRect(x, y, width, height);\r\n    }\r\n    fillText(text, x, y, maxWidth) {\r\n        if (maxWidth) {\r\n            this._context.fillText(text, x, y, maxWidth);\r\n        }\r\n        else {\r\n            this._context.fillText(text, x, y);\r\n        }\r\n    }\r\n    measureText(text) {\r\n        return this._context.measureText(text);\r\n    }\r\n    getImageData(sx, sy, sw, sh) {\r\n        return this._context.getImageData(sx, sy, sw, sh);\r\n    }\r\n    lineTo(x, y) {\r\n        this._context.lineTo(x, y);\r\n    }\r\n    moveTo(x, y) {\r\n        this._context.moveTo(x, y);\r\n    }\r\n    rect(x, y, width, height) {\r\n        this._context.rect(x, y, width, height);\r\n    }\r\n    roundRect(x, y, width, height, radii) {\r\n        this._context.roundRect(x, y, width, height, radii);\r\n    }\r\n    putImageData(imageData, dx, dy) {\r\n        this._context.putImageData(imageData, dx, dy);\r\n    }\r\n    quadraticCurveTo(cpx, cpy, x, y) {\r\n        this._context.quadraticCurveTo(cpx, cpy, x, y);\r\n    }\r\n    restore() {\r\n        this._context.restore();\r\n    }\r\n    rotate(angle) {\r\n        this._context.rotate(angle);\r\n    }\r\n    save() {\r\n        this._context.save();\r\n    }\r\n    scale(x, y) {\r\n        this._context.scale(x, y);\r\n    }\r\n    setLineDash(segments) {\r\n        if (this._context.setLineDash) {\r\n            this._context.setLineDash(segments);\r\n        }\r\n        else if ('mozDash' in this._context) {\r\n            this._context['mozDash'] = segments;\r\n        }\r\n        else if ('webkitLineDash' in this._context) {\r\n            this._context['webkitLineDash'] = segments;\r\n        }\r\n    }\r\n    getLineDash() {\r\n        return this._context.getLineDash();\r\n    }\r\n    setTransform(a, b, c, d, e, f) {\r\n        this._context.setTransform(a, b, c, d, e, f);\r\n    }\r\n    stroke(path2d) {\r\n        if (path2d) {\r\n            this._context.stroke(path2d);\r\n        }\r\n        else {\r\n            this._context.stroke();\r\n        }\r\n    }\r\n    strokeText(text, x, y, maxWidth) {\r\n        this._context.strokeText(text, x, y, maxWidth);\r\n    }\r\n    transform(a, b, c, d, e, f) {\r\n        this._context.transform(a, b, c, d, e, f);\r\n    }\r\n    translate(x, y) {\r\n        this._context.translate(x, y);\r\n    }\r\n    _enableTrace() {\r\n        let that = this, len = CONTEXT_METHODS.length, origSetter = this.setAttr, n, args;\r\n        const func = function (methodName) {\r\n            let origMethod = that[methodName], ret;\r\n            that[methodName] = function () {\r\n                args = simplifyArray(Array.prototype.slice.call(arguments, 0));\r\n                ret = origMethod.apply(that, arguments);\r\n                that._trace({\r\n                    method: methodName,\r\n                    args: args,\r\n                });\r\n                return ret;\r\n            };\r\n        };\r\n        for (n = 0; n < len; n++) {\r\n            func(CONTEXT_METHODS[n]);\r\n        }\r\n        that.setAttr = function () {\r\n            origSetter.apply(that, arguments);\r\n            const prop = arguments[0];\r\n            let val = arguments[1];\r\n            if (prop === 'shadowOffsetX' ||\r\n                prop === 'shadowOffsetY' ||\r\n                prop === 'shadowBlur') {\r\n                val = val / this.canvas.getPixelRatio();\r\n            }\r\n            that._trace({\r\n                property: prop,\r\n                val: val,\r\n            });\r\n        };\r\n    }\r\n    _applyGlobalCompositeOperation(node) {\r\n        const op = node.attrs.globalCompositeOperation;\r\n        const def = !op || op === 'source-over';\r\n        if (!def) {\r\n            this.setAttr('globalCompositeOperation', op);\r\n        }\r\n    }\r\n}\r\nCONTEXT_PROPERTIES.forEach(function (prop) {\r\n    Object.defineProperty(Context.prototype, prop, {\r\n        get() {\r\n            return this._context[prop];\r\n        },\r\n        set(val) {\r\n            this._context[prop] = val;\r\n        },\r\n    });\r\n});\r\nexport class SceneContext extends Context {\r\n    constructor(canvas, { willReadFrequently = false } = {}) {\r\n        super(canvas);\r\n        this._context = canvas._canvas.getContext('2d', {\r\n            willReadFrequently,\r\n        });\r\n    }\r\n    _fillColor(shape) {\r\n        const fill = shape.fill();\r\n        this.setAttr('fillStyle', fill);\r\n        shape._fillFunc(this);\r\n    }\r\n    _fillPattern(shape) {\r\n        this.setAttr('fillStyle', shape._getFillPattern());\r\n        shape._fillFunc(this);\r\n    }\r\n    _fillLinearGradient(shape) {\r\n        const grd = shape._getLinearGradient();\r\n        if (grd) {\r\n            this.setAttr('fillStyle', grd);\r\n            shape._fillFunc(this);\r\n        }\r\n    }\r\n    _fillRadialGradient(shape) {\r\n        const grd = shape._getRadialGradient();\r\n        if (grd) {\r\n            this.setAttr('fillStyle', grd);\r\n            shape._fillFunc(this);\r\n        }\r\n    }\r\n    _fill(shape) {\r\n        const hasColor = shape.fill(), fillPriority = shape.getFillPriority();\r\n        if (hasColor && fillPriority === 'color') {\r\n            this._fillColor(shape);\r\n            return;\r\n        }\r\n        const hasPattern = shape.getFillPatternImage();\r\n        if (hasPattern && fillPriority === 'pattern') {\r\n            this._fillPattern(shape);\r\n            return;\r\n        }\r\n        const hasLinearGradient = shape.getFillLinearGradientColorStops();\r\n        if (hasLinearGradient && fillPriority === 'linear-gradient') {\r\n            this._fillLinearGradient(shape);\r\n            return;\r\n        }\r\n        const hasRadialGradient = shape.getFillRadialGradientColorStops();\r\n        if (hasRadialGradient && fillPriority === 'radial-gradient') {\r\n            this._fillRadialGradient(shape);\r\n            return;\r\n        }\r\n        if (hasColor) {\r\n            this._fillColor(shape);\r\n        }\r\n        else if (hasPattern) {\r\n            this._fillPattern(shape);\r\n        }\r\n        else if (hasLinearGradient) {\r\n            this._fillLinearGradient(shape);\r\n        }\r\n        else if (hasRadialGradient) {\r\n            this._fillRadialGradient(shape);\r\n        }\r\n    }\r\n    _strokeLinearGradient(shape) {\r\n        const start = shape.getStrokeLinearGradientStartPoint(), end = shape.getStrokeLinearGradientEndPoint(), colorStops = shape.getStrokeLinearGradientColorStops(), grd = this.createLinearGradient(start.x, start.y, end.x, end.y);\r\n        if (colorStops) {\r\n            for (let n = 0; n < colorStops.length; n += 2) {\r\n                grd.addColorStop(colorStops[n], colorStops[n + 1]);\r\n            }\r\n            this.setAttr('strokeStyle', grd);\r\n        }\r\n    }\r\n    _stroke(shape) {\r\n        const dash = shape.dash(), strokeScaleEnabled = shape.getStrokeScaleEnabled();\r\n        if (shape.hasStroke()) {\r\n            if (!strokeScaleEnabled) {\r\n                this.save();\r\n                const pixelRatio = this.getCanvas().getPixelRatio();\r\n                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n            }\r\n            this._applyLineCap(shape);\r\n            if (dash && shape.dashEnabled()) {\r\n                this.setLineDash(dash);\r\n                this.setAttr('lineDashOffset', shape.dashOffset());\r\n            }\r\n            this.setAttr('lineWidth', shape.strokeWidth());\r\n            if (!shape.getShadowForStrokeEnabled()) {\r\n                this.setAttr('shadowColor', 'rgba(0,0,0,0)');\r\n            }\r\n            const hasLinearGradient = shape.getStrokeLinearGradientColorStops();\r\n            if (hasLinearGradient) {\r\n                this._strokeLinearGradient(shape);\r\n            }\r\n            else {\r\n                this.setAttr('strokeStyle', shape.stroke());\r\n            }\r\n            shape._strokeFunc(this);\r\n            if (!strokeScaleEnabled) {\r\n                this.restore();\r\n            }\r\n        }\r\n    }\r\n    _applyShadow(shape) {\r\n        var _a, _b, _c;\r\n        const color = (_a = shape.getShadowRGBA()) !== null && _a !== void 0 ? _a : 'black', blur = (_b = shape.getShadowBlur()) !== null && _b !== void 0 ? _b : 5, offset = (_c = shape.getShadowOffset()) !== null && _c !== void 0 ? _c : {\r\n            x: 0,\r\n            y: 0,\r\n        }, scale = shape.getAbsoluteScale(), ratio = this.canvas.getPixelRatio(), scaleX = scale.x * ratio, scaleY = scale.y * ratio;\r\n        this.setAttr('shadowColor', color);\r\n        this.setAttr('shadowBlur', blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));\r\n        this.setAttr('shadowOffsetX', offset.x * scaleX);\r\n        this.setAttr('shadowOffsetY', offset.y * scaleY);\r\n    }\r\n}\r\nexport class HitContext extends Context {\r\n    constructor(canvas) {\r\n        super(canvas);\r\n        this._context = canvas._canvas.getContext('2d', {\r\n            willReadFrequently: true,\r\n        });\r\n    }\r\n    _fill(shape) {\r\n        this.save();\r\n        this.setAttr('fillStyle', shape.colorKey);\r\n        shape._fillFuncHit(this);\r\n        this.restore();\r\n    }\r\n    strokeShape(shape) {\r\n        if (shape.hasHitStroke()) {\r\n            this._stroke(shape);\r\n        }\r\n    }\r\n    _stroke(shape) {\r\n        if (shape.hasHitStroke()) {\r\n            const strokeScaleEnabled = shape.getStrokeScaleEnabled();\r\n            if (!strokeScaleEnabled) {\r\n                this.save();\r\n                const pixelRatio = this.getCanvas().getPixelRatio();\r\n                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n            }\r\n            this._applyLineCap(shape);\r\n            const hitStrokeWidth = shape.hitStrokeWidth();\r\n            const strokeWidth = hitStrokeWidth === 'auto' ? shape.strokeWidth() : hitStrokeWidth;\r\n            this.setAttr('lineWidth', strokeWidth);\r\n            this.setAttr('strokeStyle', shape.colorKey);\r\n            shape._strokeFuncHit(this);\r\n            if (!strokeScaleEnabled) {\r\n                this.restore();\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}