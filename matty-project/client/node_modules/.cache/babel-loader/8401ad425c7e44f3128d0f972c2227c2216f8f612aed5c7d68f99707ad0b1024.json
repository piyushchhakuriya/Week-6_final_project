{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nlet authToken = null;\nlet currentUser = null;\nexport const tokenManager = {\n  setToken: token => {\n    authToken = token;\n  },\n  getToken: () => {\n    return authToken;\n  },\n  removeToken: () => {\n    authToken = null;\n  },\n  setUser: user => {\n    currentUser = user;\n  },\n  getUser: () => {\n    return currentUser;\n  },\n  removeUser: () => {\n    currentUser = null;\n  },\n  clearAuth: () => {\n    authToken = null;\n    currentUser = null;\n  }\n};\nconst apiRequest = async (endpoint, options = {}) => {\n  const token = tokenManager.getToken();\n  const config = {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      }),\n      ...options.headers\n    }\n  };\n  try {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\n    if (response.status === 401) {\n      tokenManager.clearAuth();\n      window.location.href = '/login';\n      throw new Error('Session expired. Please login again.');\n    }\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Request failed');\n    }\n    return data;\n  } catch (error) {\n    console.error('API Request Error:', error);\n    throw error;\n  }\n};\nexport const authAPI = {\n  register: async userData => {\n    const response = await apiRequest('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n    if (response.token) {\n      tokenManager.setToken(response.token);\n      tokenManager.setUser(response.user);\n    }\n    return response;\n  },\n  login: async credentials => {\n    const response = await apiRequest('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n    if (response.token) {\n      tokenManager.setToken(response.token);\n      tokenManager.setUser(response.user);\n    }\n    return response;\n  },\n  logout: () => {\n    tokenManager.clearAuth();\n  },\n  verifyToken: async () => {\n    return await apiRequest('/auth/verify', {\n      method: 'GET'\n    });\n  },\n  forgotPassword: async email => {\n    return await apiRequest('/auth/forgot-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n  },\n  resetPassword: async (token, newPassword) => {\n    return await apiRequest('/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        token,\n        password: newPassword\n      })\n    });\n  }\n};\nexport default {\n  auth: authAPI\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","authToken","currentUser","tokenManager","setToken","token","getToken","removeToken","setUser","user","getUser","removeUser","clearAuth","apiRequest","endpoint","options","config","headers","Authorization","response","fetch","status","window","location","href","Error","data","json","ok","message","error","console","authAPI","register","userData","method","body","JSON","stringify","login","credentials","logout","verifyToken","forgotPassword","email","resetPassword","newPassword","password","auth"],"sources":["C:/Users/lenovo pro/Documents/gncipl-6-week/Week-6_final_project/matty-project/client/src/api/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nlet authToken = null;\r\nlet currentUser = null;\r\n\r\nexport const tokenManager = {\r\n  setToken: (token) => {\r\n    authToken = token;\r\n  },\r\n  \r\n  getToken: () => {\r\n    return authToken;\r\n  },\r\n  \r\n  removeToken: () => {\r\n    authToken = null;\r\n  },\r\n  \r\n  setUser: (user) => {\r\n    currentUser = user;\r\n  },\r\n  \r\n  getUser: () => {\r\n    return currentUser;\r\n  },\r\n  \r\n  removeUser: () => {\r\n    currentUser = null;\r\n  },\r\n  \r\n  clearAuth: () => {\r\n    authToken = null;\r\n    currentUser = null;\r\n  }\r\n};\r\n\r\nconst apiRequest = async (endpoint, options = {}) => {\r\n  const token = tokenManager.getToken();\r\n  \r\n  const config = {\r\n    ...options,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { Authorization: `Bearer ${token}` }),\r\n      ...options.headers,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, config);\r\n    \r\n    if (response.status === 401) {\r\n      tokenManager.clearAuth();\r\n      window.location.href = '/login';\r\n      throw new Error('Session expired. Please login again.');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(data.message || 'Request failed');\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('API Request Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const authAPI = {\r\n  register: async (userData) => {\r\n    const response = await apiRequest('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n    \r\n    if (response.token) {\r\n      tokenManager.setToken(response.token);\r\n      tokenManager.setUser(response.user);\r\n    }\r\n    \r\n    return response;\r\n  },\r\n\r\n  login: async (credentials) => {\r\n    const response = await apiRequest('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    \r\n    if (response.token) {\r\n      tokenManager.setToken(response.token);\r\n      tokenManager.setUser(response.user);\r\n    }\r\n    \r\n    return response;\r\n  },\r\n\r\n  logout: () => {\r\n    tokenManager.clearAuth();\r\n  },\r\n\r\n  verifyToken: async () => {\r\n    return await apiRequest('/auth/verify', {\r\n      method: 'GET',\r\n    });\r\n  },\r\n\r\n  forgotPassword: async (email) => {\r\n    return await apiRequest('/auth/forgot-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email }),\r\n    });\r\n  },\r\n\r\n  resetPassword: async (token, newPassword) => {\r\n    return await apiRequest('/auth/reset-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ token, password: newPassword }),\r\n    });\r\n  },\r\n};\r\n\r\n\r\n\r\nexport default {\r\n  auth: authAPI,\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}