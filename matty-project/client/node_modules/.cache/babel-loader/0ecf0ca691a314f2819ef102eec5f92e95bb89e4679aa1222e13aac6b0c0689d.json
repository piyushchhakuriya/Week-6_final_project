{"ast":null,"code":"import { Util, Transform } from \"../Util.js\";\nimport { Factory } from \"../Factory.js\";\nimport { Node } from \"../Node.js\";\nimport { Shape } from \"../Shape.js\";\nimport { Rect } from \"./Rect.js\";\nimport { Group } from \"../Group.js\";\nimport { Konva } from \"../Global.js\";\nimport { getBooleanValidator, getNumberValidator } from \"../Validators.js\";\nimport { _registerNode } from \"../Global.js\";\nconst EVENTS_NAME = 'tr-konva';\nconst ATTR_CHANGE_LIST = ['resizeEnabledChange', 'rotateAnchorOffsetChange', 'rotateEnabledChange', 'enabledAnchorsChange', 'anchorSizeChange', 'borderEnabledChange', 'borderStrokeChange', 'borderStrokeWidthChange', 'borderDashChange', 'anchorStrokeChange', 'anchorStrokeWidthChange', 'anchorFillChange', 'anchorCornerRadiusChange', 'ignoreStrokeChange', 'anchorStyleFuncChange'].map(e => e + `.${EVENTS_NAME}`).join(' ');\nconst NODES_RECT = 'nodesRect';\nconst TRANSFORM_CHANGE_STR = ['widthChange', 'heightChange', 'scaleXChange', 'scaleYChange', 'skewXChange', 'skewYChange', 'rotationChange', 'offsetXChange', 'offsetYChange', 'transformsEnabledChange', 'strokeWidthChange', 'draggableChange'];\nconst ANGLES = {\n  'top-left': -45,\n  'top-center': 0,\n  'top-right': 45,\n  'middle-right': -90,\n  'middle-left': 90,\n  'bottom-left': -135,\n  'bottom-center': 180,\n  'bottom-right': 135\n};\nconst TOUCH_DEVICE = 'ontouchstart' in Konva._global;\nfunction getCursor(anchorName, rad, rotateCursor) {\n  if (anchorName === 'rotater') {\n    return rotateCursor;\n  }\n  rad += Util.degToRad(ANGLES[anchorName] || 0);\n  const angle = (Util.radToDeg(rad) % 360 + 360) % 360;\n  if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n    return 'nwse-resize';\n  } else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n    return 'nwse-resize';\n  } else {\n    Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n    return 'pointer';\n  }\n}\nconst ANCHORS_NAMES = ['top-left', 'top-center', 'top-right', 'middle-right', 'middle-left', 'bottom-left', 'bottom-center', 'bottom-right'];\nconst MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n  return {\n    x: shape.x + shape.width / 2 * Math.cos(shape.rotation) + shape.height / 2 * Math.sin(-shape.rotation),\n    y: shape.y + shape.height / 2 * Math.cos(shape.rotation) + shape.width / 2 * Math.sin(shape.rotation)\n  };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n  const x = point.x + (shape.x - point.x) * Math.cos(angleRad) - (shape.y - point.y) * Math.sin(angleRad);\n  const y = point.y + (shape.x - point.x) * Math.sin(angleRad) + (shape.y - point.y) * Math.cos(angleRad);\n  return {\n    ...shape,\n    rotation: shape.rotation + angleRad,\n    x,\n    y\n  };\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n  const center = getCenter(shape);\n  return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n  let snapped = newRotationRad;\n  for (let i = 0; i < snaps.length; i++) {\n    const angle = Konva.getAngle(snaps[i]);\n    const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n    const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n    if (dif < tol) {\n      snapped = angle;\n    }\n  }\n  return snapped;\n}\nlet activeTransformersCount = 0;\nexport class Transformer extends Group {\n  constructor(config) {\n    super(config);\n    this._movingAnchorName = null;\n    this._transforming = false;\n    this._createElements();\n    this._handleMouseMove = this._handleMouseMove.bind(this);\n    this._handleMouseUp = this._handleMouseUp.bind(this);\n    this.update = this.update.bind(this);\n    this.on(ATTR_CHANGE_LIST, this.update);\n    if (this.getNode()) {\n      this.update();\n    }\n  }\n  attachTo(node) {\n    this.setNode(node);\n    return this;\n  }\n  setNode(node) {\n    Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n    return this.setNodes([node]);\n  }\n  getNode() {\n    return this._nodes && this._nodes[0];\n  }\n  _getEventNamespace() {\n    return EVENTS_NAME + this._id;\n  }\n  setNodes(nodes = []) {\n    if (this._nodes && this._nodes.length) {\n      this.detach();\n    }\n    const filteredNodes = nodes.filter(node => {\n      if (node.isAncestorOf(this)) {\n        Util.error('Konva.Transformer cannot be an a child of the node you are trying to attach');\n        return false;\n      }\n      return true;\n    });\n    this._nodes = nodes = filteredNodes;\n    if (nodes.length === 1 && this.useSingleNodeRotation()) {\n      this.rotation(nodes[0].getAbsoluteRotation());\n    } else {\n      this.rotation(0);\n    }\n    this._nodes.forEach(node => {\n      const onChange = () => {\n        if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n          this.rotation(this.nodes()[0].getAbsoluteRotation());\n        }\n        this._resetTransformCache();\n        if (!this._transforming && !this.isDragging()) {\n          this.update();\n        }\n      };\n      if (node._attrsAffectingSize.length) {\n        const additionalEvents = node._attrsAffectingSize.map(prop => prop + 'Change.' + this._getEventNamespace()).join(' ');\n        node.on(additionalEvents, onChange);\n      }\n      node.on(TRANSFORM_CHANGE_STR.map(e => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n      node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n      this._proxyDrag(node);\n    });\n    this._resetTransformCache();\n    const elementsCreated = !!this.findOne('.top-left');\n    if (elementsCreated) {\n      this.update();\n    }\n    return this;\n  }\n  _proxyDrag(node) {\n    let lastPos;\n    node.on(`dragstart.${this._getEventNamespace()}`, e => {\n      lastPos = node.getAbsolutePosition();\n      if (!this.isDragging() && node !== this.findOne('.back')) {\n        this.startDrag(e, false);\n      }\n    });\n    node.on(`dragmove.${this._getEventNamespace()}`, e => {\n      if (!lastPos) {\n        return;\n      }\n      const abs = node.getAbsolutePosition();\n      const dx = abs.x - lastPos.x;\n      const dy = abs.y - lastPos.y;\n      this.nodes().forEach(otherNode => {\n        if (otherNode === node) {\n          return;\n        }\n        if (otherNode.isDragging()) {\n          return;\n        }\n        const otherAbs = otherNode.getAbsolutePosition();\n        otherNode.setAbsolutePosition({\n          x: otherAbs.x + dx,\n          y: otherAbs.y + dy\n        });\n        otherNode.startDrag(e);\n      });\n      lastPos = null;\n    });\n  }\n  getNodes() {\n    return this._nodes || [];\n  }\n  getActiveAnchor() {\n    return this._movingAnchorName;\n  }\n  detach() {\n    if (this._nodes) {\n      this._nodes.forEach(node => {\n        node.off('.' + this._getEventNamespace());\n      });\n    }\n    this._nodes = [];\n    this._resetTransformCache();\n  }\n  _resetTransformCache() {\n    this._clearCache(NODES_RECT);\n    this._clearCache('transform');\n    this._clearSelfAndDescendantCache('absoluteTransform');\n  }\n  _getNodeRect() {\n    return this._getCache(NODES_RECT, this.__getNodeRect);\n  }\n  __getNodeShape(node, rot = this.rotation(), relative) {\n    const rect = node.getClientRect({\n      skipTransform: true,\n      skipShadow: true,\n      skipStroke: this.ignoreStroke()\n    });\n    const absScale = node.getAbsoluteScale(relative);\n    const absPos = node.getAbsolutePosition(relative);\n    const dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n    const dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n    const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) % (Math.PI * 2);\n    const box = {\n      x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n      y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n      width: rect.width * absScale.x,\n      height: rect.height * absScale.y,\n      rotation: rotation\n    };\n    return rotateAroundPoint(box, -Konva.getAngle(rot), {\n      x: 0,\n      y: 0\n    });\n  }\n  __getNodeRect() {\n    const node = this.getNode();\n    if (!node) {\n      return {\n        x: -MAX_SAFE_INTEGER,\n        y: -MAX_SAFE_INTEGER,\n        width: 0,\n        height: 0,\n        rotation: 0\n      };\n    }\n    const totalPoints = [];\n    this.nodes().map(node => {\n      const box = node.getClientRect({\n        skipTransform: true,\n        skipShadow: true,\n        skipStroke: this.ignoreStroke()\n      });\n      const points = [{\n        x: box.x,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y + box.height\n      }, {\n        x: box.x,\n        y: box.y + box.height\n      }];\n      const trans = node.getAbsoluteTransform();\n      points.forEach(function (point) {\n        const transformed = trans.point(point);\n        totalPoints.push(transformed);\n      });\n    });\n    const tr = new Transform();\n    tr.rotate(-Konva.getAngle(this.rotation()));\n    let minX = Infinity,\n      minY = Infinity,\n      maxX = -Infinity,\n      maxY = -Infinity;\n    totalPoints.forEach(function (point) {\n      const transformed = tr.point(point);\n      if (minX === undefined) {\n        minX = maxX = transformed.x;\n        minY = maxY = transformed.y;\n      }\n      minX = Math.min(minX, transformed.x);\n      minY = Math.min(minY, transformed.y);\n      maxX = Math.max(maxX, transformed.x);\n      maxY = Math.max(maxY, transformed.y);\n    });\n    tr.invert();\n    const p = tr.point({\n      x: minX,\n      y: minY\n    });\n    return {\n      x: p.x,\n      y: p.y,\n      width: maxX - minX,\n      height: maxY - minY,\n      rotation: Konva.getAngle(this.rotation())\n    };\n  }\n  getX() {\n    return this._getNodeRect().x;\n  }\n  getY() {\n    return this._getNodeRect().y;\n  }\n  getWidth() {\n    return this._getNodeRect().width;\n  }\n  getHeight() {\n    return this._getNodeRect().height;\n  }\n  _createElements() {\n    this._createBack();\n    ANCHORS_NAMES.forEach(name => {\n      this._createAnchor(name);\n    });\n    this._createAnchor('rotater');\n  }\n  _createAnchor(name) {\n    const anchor = new Rect({\n      stroke: 'rgb(0, 161, 255)',\n      fill: 'white',\n      strokeWidth: 1,\n      name: name + ' _anchor',\n      dragDistance: 0,\n      draggable: true,\n      hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto'\n    });\n    const self = this;\n    anchor.on('mousedown touchstart', function (e) {\n      self._handleMouseDown(e);\n    });\n    anchor.on('dragstart', e => {\n      anchor.stopDrag();\n      e.cancelBubble = true;\n    });\n    anchor.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    anchor.on('mouseenter', () => {\n      const rad = Konva.getAngle(this.rotation());\n      const rotateCursor = this.rotateAnchorCursor();\n      const cursor = getCursor(name, rad, rotateCursor);\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = cursor);\n      this._cursorChange = true;\n    });\n    anchor.on('mouseout', () => {\n      anchor.getStage().content && (anchor.getStage().content.style.cursor = '');\n      this._cursorChange = false;\n    });\n    this.add(anchor);\n  }\n  _createBack() {\n    const back = new Shape({\n      name: 'back',\n      width: 0,\n      height: 0,\n      sceneFunc(ctx, shape) {\n        const tr = shape.getParent();\n        const padding = tr.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n        ctx.moveTo(shape.width() / 2, -padding);\n        if (tr.rotateEnabled() && tr.rotateLineVisible()) {\n          ctx.lineTo(shape.width() / 2, -tr.rotateAnchorOffset() * Util._sign(shape.height()) - padding);\n        }\n        ctx.fillStrokeShape(shape);\n      },\n      hitFunc: (ctx, shape) => {\n        if (!this.shouldOverdrawWholeArea()) {\n          return;\n        }\n        const padding = this.padding();\n        ctx.beginPath();\n        ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n        ctx.fillStrokeShape(shape);\n      }\n    });\n    this.add(back);\n    this._proxyDrag(back);\n    back.on('dragstart', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragmove', e => {\n      e.cancelBubble = true;\n    });\n    back.on('dragend', e => {\n      e.cancelBubble = true;\n    });\n    this.on('dragmove', e => {\n      this.update();\n    });\n  }\n  _handleMouseDown(e) {\n    if (this._transforming) {\n      return;\n    }\n    this._movingAnchorName = e.target.name().split(' ')[0];\n    const attrs = this._getNodeRect();\n    const width = attrs.width;\n    const height = attrs.height;\n    const hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n    this.sin = Math.abs(height / hypotenuse);\n    this.cos = Math.abs(width / hypotenuse);\n    if (typeof window !== 'undefined') {\n      window.addEventListener('mousemove', this._handleMouseMove);\n      window.addEventListener('touchmove', this._handleMouseMove);\n      window.addEventListener('mouseup', this._handleMouseUp, true);\n      window.addEventListener('touchend', this._handleMouseUp, true);\n    }\n    this._transforming = true;\n    const ap = e.target.getAbsolutePosition();\n    const pos = e.target.getStage().getPointerPosition();\n    this._anchorDragOffset = {\n      x: pos.x - ap.x,\n      y: pos.y - ap.y\n    };\n    activeTransformersCount++;\n    this._fire('transformstart', {\n      evt: e.evt,\n      target: this.getNode()\n    });\n    this._nodes.forEach(target => {\n      target._fire('transformstart', {\n        evt: e.evt,\n        target\n      });\n    });\n  }\n  _handleMouseMove(e) {\n    let x, y, newHypotenuse;\n    const anchorNode = this.findOne('.' + this._movingAnchorName);\n    const stage = anchorNode.getStage();\n    stage.setPointersPositions(e);\n    const pp = stage.getPointerPosition();\n    let newNodePos = {\n      x: pp.x - this._anchorDragOffset.x,\n      y: pp.y - this._anchorDragOffset.y\n    };\n    const oldAbs = anchorNode.getAbsolutePosition();\n    if (this.anchorDragBoundFunc()) {\n      newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n    }\n    anchorNode.setAbsolutePosition(newNodePos);\n    const newAbs = anchorNode.getAbsolutePosition();\n    if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n      return;\n    }\n    if (this._movingAnchorName === 'rotater') {\n      const attrs = this._getNodeRect();\n      x = anchorNode.x() - attrs.width / 2;\n      y = -anchorNode.y() + attrs.height / 2;\n      let delta = Math.atan2(-y, x) + Math.PI / 2;\n      if (attrs.height < 0) {\n        delta -= Math.PI;\n      }\n      const oldRotation = Konva.getAngle(this.rotation());\n      const newRotation = oldRotation + delta;\n      const tol = Konva.getAngle(this.rotationSnapTolerance());\n      const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n      const diff = snappedRot - attrs.rotation;\n      const shape = rotateAroundCenter(attrs, diff);\n      this._fitNodesInto(shape, e);\n      return;\n    }\n    const shiftBehavior = this.shiftBehavior();\n    let keepProportion;\n    if (shiftBehavior === 'inverted') {\n      keepProportion = this.keepRatio() && !e.shiftKey;\n    } else if (shiftBehavior === 'none') {\n      keepProportion = this.keepRatio();\n    } else {\n      keepProportion = this.keepRatio() || e.shiftKey;\n    }\n    let centeredScaling = this.centeredScaling() || e.altKey;\n    if (this._movingAnchorName === 'top-left') {\n      if (keepProportion) {\n        const comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-right').x(),\n          y: this.findOne('.bottom-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        const reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n        const reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-left').x(comparePoint.x - x);\n        this.findOne('.top-left').y(comparePoint.y - y);\n      }\n    } else if (this._movingAnchorName === 'top-center') {\n      this.findOne('.top-left').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'top-right') {\n      if (keepProportion) {\n        const comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.bottom-left').x(),\n          y: this.findOne('.bottom-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n        const reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n        const reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.top-right').x(comparePoint.x + x);\n        this.findOne('.top-right').y(comparePoint.y - y);\n      }\n      var pos = anchorNode.position();\n      this.findOne('.top-left').y(pos.y);\n      this.findOne('.bottom-right').x(pos.x);\n    } else if (this._movingAnchorName === 'middle-left') {\n      this.findOne('.top-left').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'middle-right') {\n      this.findOne('.bottom-right').x(anchorNode.x());\n    } else if (this._movingAnchorName === 'bottom-left') {\n      if (keepProportion) {\n        const comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-right').x(),\n          y: this.findOne('.top-right').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        const reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n        const reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        anchorNode.x(comparePoint.x - x);\n        anchorNode.y(comparePoint.y + y);\n      }\n      pos = anchorNode.position();\n      this.findOne('.top-left').x(pos.x);\n      this.findOne('.bottom-right').y(pos.y);\n    } else if (this._movingAnchorName === 'bottom-center') {\n      this.findOne('.bottom-right').y(anchorNode.y());\n    } else if (this._movingAnchorName === 'bottom-right') {\n      if (keepProportion) {\n        const comparePoint = centeredScaling ? {\n          x: this.width() / 2,\n          y: this.height() / 2\n        } : {\n          x: this.findOne('.top-left').x(),\n          y: this.findOne('.top-left').y()\n        };\n        newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n        const reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n        const reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n        x = newHypotenuse * this.cos * reverseX;\n        y = newHypotenuse * this.sin * reverseY;\n        this.findOne('.bottom-right').x(comparePoint.x + x);\n        this.findOne('.bottom-right').y(comparePoint.y + y);\n      }\n    } else {\n      console.error(new Error('Wrong position argument of selection resizer: ' + this._movingAnchorName));\n    }\n    centeredScaling = this.centeredScaling() || e.altKey;\n    if (centeredScaling) {\n      const topLeft = this.findOne('.top-left');\n      const bottomRight = this.findOne('.bottom-right');\n      const topOffsetX = topLeft.x();\n      const topOffsetY = topLeft.y();\n      const bottomOffsetX = this.getWidth() - bottomRight.x();\n      const bottomOffsetY = this.getHeight() - bottomRight.y();\n      bottomRight.move({\n        x: -topOffsetX,\n        y: -topOffsetY\n      });\n      topLeft.move({\n        x: bottomOffsetX,\n        y: bottomOffsetY\n      });\n    }\n    const absPos = this.findOne('.top-left').getAbsolutePosition();\n    x = absPos.x;\n    y = absPos.y;\n    const width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n    const height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n    this._fitNodesInto({\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      rotation: Konva.getAngle(this.rotation())\n    }, e);\n  }\n  _handleMouseUp(e) {\n    this._removeEvents(e);\n  }\n  getAbsoluteTransform() {\n    return this.getTransform();\n  }\n  _removeEvents(e) {\n    var _a;\n    if (this._transforming) {\n      this._transforming = false;\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('mousemove', this._handleMouseMove);\n        window.removeEventListener('touchmove', this._handleMouseMove);\n        window.removeEventListener('mouseup', this._handleMouseUp, true);\n        window.removeEventListener('touchend', this._handleMouseUp, true);\n      }\n      const node = this.getNode();\n      activeTransformersCount--;\n      this._fire('transformend', {\n        evt: e,\n        target: node\n      });\n      (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n      if (node) {\n        this._nodes.forEach(target => {\n          var _a;\n          target._fire('transformend', {\n            evt: e,\n            target\n          });\n          (_a = target.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n        });\n      }\n      this._movingAnchorName = null;\n    }\n  }\n  _fitNodesInto(newAttrs, evt) {\n    const oldAttrs = this._getNodeRect();\n    const minSize = 1;\n    if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n    if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n      this.update();\n      return;\n    }\n    const t = new Transform();\n    t.rotate(Konva.getAngle(this.rotation()));\n    if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('left') >= 0) {\n      const offset = t.point({\n        x: -this.padding() * 2,\n        y: 0\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      newAttrs.width += this.padding() * 2;\n      this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n    } else if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('right') >= 0) {\n      const offset = t.point({\n        x: this.padding() * 2,\n        y: 0\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.width += this.padding() * 2;\n    }\n    if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('top') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: -this.padding() * 2\n      });\n      newAttrs.x += offset.x;\n      newAttrs.y += offset.y;\n      this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n    } else if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('bottom') >= 0) {\n      const offset = t.point({\n        x: 0,\n        y: this.padding() * 2\n      });\n      this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n      this._anchorDragOffset.x -= offset.x;\n      this._anchorDragOffset.y -= offset.y;\n      newAttrs.height += this.padding() * 2;\n    }\n    if (this.boundBoxFunc()) {\n      const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n      if (bounded) {\n        newAttrs = bounded;\n      } else {\n        Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n      }\n    }\n    const baseSize = 10000000;\n    const oldTr = new Transform();\n    oldTr.translate(oldAttrs.x, oldAttrs.y);\n    oldTr.rotate(oldAttrs.rotation);\n    oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n    const newTr = new Transform();\n    const newScaleX = newAttrs.width / baseSize;\n    const newScaleY = newAttrs.height / baseSize;\n    if (this.flipEnabled() === false) {\n      newTr.translate(newAttrs.x, newAttrs.y);\n      newTr.rotate(newAttrs.rotation);\n      newTr.translate(newAttrs.width < 0 ? newAttrs.width : 0, newAttrs.height < 0 ? newAttrs.height : 0);\n      newTr.scale(Math.abs(newScaleX), Math.abs(newScaleY));\n    } else {\n      newTr.translate(newAttrs.x, newAttrs.y);\n      newTr.rotate(newAttrs.rotation);\n      newTr.scale(newScaleX, newScaleY);\n    }\n    const delta = newTr.multiply(oldTr.invert());\n    this._nodes.forEach(node => {\n      var _a;\n      if (!node.getStage()) {\n        return;\n      }\n      const parentTransform = node.getParent().getAbsoluteTransform();\n      const localTransform = node.getTransform().copy();\n      localTransform.translate(node.offsetX(), node.offsetY());\n      const newLocalTransform = new Transform();\n      newLocalTransform.multiply(parentTransform.copy().invert()).multiply(delta).multiply(parentTransform).multiply(localTransform);\n      const attrs = newLocalTransform.decompose();\n      node.setAttrs(attrs);\n      (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    });\n    this.rotation(Util._getRotation(newAttrs.rotation));\n    this._nodes.forEach(node => {\n      this._fire('transform', {\n        evt: evt,\n        target: node\n      });\n      node._fire('transform', {\n        evt: evt,\n        target: node\n      });\n    });\n    this._resetTransformCache();\n    this.update();\n    this.getLayer().batchDraw();\n  }\n  forceUpdate() {\n    this._resetTransformCache();\n    this.update();\n  }\n  _batchChangeChild(selector, attrs) {\n    const anchor = this.findOne(selector);\n    anchor.setAttrs(attrs);\n  }\n  update() {\n    var _a;\n    const attrs = this._getNodeRect();\n    this.rotation(Util._getRotation(attrs.rotation));\n    const width = attrs.width;\n    const height = attrs.height;\n    const enabledAnchors = this.enabledAnchors();\n    const resizeEnabled = this.resizeEnabled();\n    const padding = this.padding();\n    const anchorSize = this.anchorSize();\n    const anchors = this.find('._anchor');\n    anchors.forEach(node => {\n      node.setAttrs({\n        width: anchorSize,\n        height: anchorSize,\n        offsetX: anchorSize / 2,\n        offsetY: anchorSize / 2,\n        stroke: this.anchorStroke(),\n        strokeWidth: this.anchorStrokeWidth(),\n        fill: this.anchorFill(),\n        cornerRadius: this.anchorCornerRadius()\n      });\n    });\n    this._batchChangeChild('.top-left', {\n      x: 0,\n      y: 0,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0\n    });\n    this._batchChangeChild('.top-center', {\n      x: width / 2,\n      y: 0,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0\n    });\n    this._batchChangeChild('.top-right', {\n      x: width,\n      y: 0,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0\n    });\n    this._batchChangeChild('.middle-left', {\n      x: 0,\n      y: height / 2,\n      offsetX: anchorSize / 2 + padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0\n    });\n    this._batchChangeChild('.middle-right', {\n      x: width,\n      y: height / 2,\n      offsetX: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0\n    });\n    this._batchChangeChild('.bottom-left', {\n      x: 0,\n      y: height,\n      offsetX: anchorSize / 2 + padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0\n    });\n    this._batchChangeChild('.bottom-center', {\n      x: width / 2,\n      y: height,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0\n    });\n    this._batchChangeChild('.bottom-right', {\n      x: width,\n      y: height,\n      offsetX: anchorSize / 2 - padding,\n      offsetY: anchorSize / 2 - padding,\n      visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0\n    });\n    this._batchChangeChild('.rotater', {\n      x: width / 2,\n      y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n      visible: this.rotateEnabled()\n    });\n    this._batchChangeChild('.back', {\n      width: width,\n      height: height,\n      visible: this.borderEnabled(),\n      stroke: this.borderStroke(),\n      strokeWidth: this.borderStrokeWidth(),\n      dash: this.borderDash(),\n      draggable: this.nodes().some(node => node.draggable()),\n      x: 0,\n      y: 0\n    });\n    const styleFunc = this.anchorStyleFunc();\n    if (styleFunc) {\n      anchors.forEach(node => {\n        styleFunc(node);\n      });\n    }\n    (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n  }\n  isTransforming() {\n    return this._transforming;\n  }\n  stopTransform() {\n    if (this._transforming) {\n      this._removeEvents();\n      const anchorNode = this.findOne('.' + this._movingAnchorName);\n      if (anchorNode) {\n        anchorNode.stopDrag();\n      }\n    }\n  }\n  destroy() {\n    if (this.getStage() && this._cursorChange) {\n      this.getStage().content && (this.getStage().content.style.cursor = '');\n    }\n    Group.prototype.destroy.call(this);\n    this.detach();\n    this._removeEvents();\n    return this;\n  }\n  toObject() {\n    return Node.prototype.toObject.call(this);\n  }\n  clone(obj) {\n    const node = Node.prototype.clone.call(this, obj);\n    return node;\n  }\n  getClientRect() {\n    if (this.nodes().length > 0) {\n      return super.getClientRect();\n    } else {\n      return {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n  }\n}\nTransformer.isTransforming = () => {\n  return activeTransformersCount > 0;\n};\nfunction validateAnchors(val) {\n  if (!(val instanceof Array)) {\n    Util.warn('enabledAnchors value should be an array');\n  }\n  if (val instanceof Array) {\n    val.forEach(function (name) {\n      if (ANCHORS_NAMES.indexOf(name) === -1) {\n        Util.warn('Unknown anchor name: ' + name + '. Available names are: ' + ANCHORS_NAMES.join(', '));\n      }\n    });\n  }\n  return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n_registerNode(Transformer);\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotateLineVisible', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateAnchorCursor', 'crosshair');\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'shiftBehavior', 'default');\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'anchorStyleFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n  lineEnabled: 'borderEnabled',\n  rotateHandlerOffset: 'rotateAnchorOffset',\n  enabledHandlers: 'enabledAnchors'\n});","map":{"version":3,"names":["Util","Transform","Factory","Node","Shape","Rect","Group","Konva","getBooleanValidator","getNumberValidator","_registerNode","EVENTS_NAME","ATTR_CHANGE_LIST","map","e","join","NODES_RECT","TRANSFORM_CHANGE_STR","ANGLES","TOUCH_DEVICE","_global","getCursor","anchorName","rad","rotateCursor","degToRad","angle","radToDeg","_inRange","error","ANCHORS_NAMES","MAX_SAFE_INTEGER","getCenter","shape","x","width","Math","cos","rotation","height","sin","y","rotateAroundPoint","angleRad","point","rotateAroundCenter","deltaRad","center","getSnap","snaps","newRotationRad","tol","snapped","i","length","getAngle","absDiff","abs","PI","dif","min","activeTransformersCount","Transformer","constructor","config","_movingAnchorName","_transforming","_createElements","_handleMouseMove","bind","_handleMouseUp","update","on","getNode","attachTo","node","setNode","warn","setNodes","_nodes","_getEventNamespace","_id","nodes","detach","filteredNodes","filter","isAncestorOf","useSingleNodeRotation","getAbsoluteRotation","forEach","onChange","_resetTransformCache","isDragging","_attrsAffectingSize","additionalEvents","prop","_proxyDrag","elementsCreated","findOne","lastPos","getAbsolutePosition","startDrag","dx","dy","otherNode","otherAbs","setAbsolutePosition","getNodes","getActiveAnchor","off","_clearCache","_clearSelfAndDescendantCache","_getNodeRect","_getCache","__getNodeRect","__getNodeShape","rot","relative","rect","getClientRect","skipTransform","skipShadow","skipStroke","ignoreStroke","absScale","getAbsoluteScale","absPos","offsetX","offsetY","box","totalPoints","points","trans","getAbsoluteTransform","transformed","push","tr","rotate","minX","Infinity","minY","maxX","maxY","undefined","max","invert","p","getX","getY","getWidth","getHeight","_createBack","name","_createAnchor","anchor","stroke","fill","strokeWidth","dragDistance","draggable","hitStrokeWidth","self","_handleMouseDown","stopDrag","cancelBubble","rotateAnchorCursor","cursor","getStage","content","style","_cursorChange","add","back","sceneFunc","ctx","getParent","padding","beginPath","moveTo","rotateEnabled","rotateLineVisible","lineTo","rotateAnchorOffset","_sign","fillStrokeShape","hitFunc","shouldOverdrawWholeArea","target","split","attrs","hypotenuse","sqrt","pow","window","addEventListener","ap","pos","getPointerPosition","_anchorDragOffset","_fire","evt","newHypotenuse","anchorNode","stage","setPointersPositions","pp","newNodePos","oldAbs","anchorDragBoundFunc","newAbs","delta","atan2","oldRotation","newRotation","rotationSnapTolerance","snappedRot","rotationSnaps","diff","_fitNodesInto","shiftBehavior","keepProportion","keepRatio","shiftKey","centeredScaling","altKey","comparePoint","reverseX","reverseY","position","console","Error","topLeft","bottomRight","topOffsetX","topOffsetY","bottomOffsetX","bottomOffsetY","move","_removeEvents","getTransform","_a","removeEventListener","getLayer","batchDraw","newAttrs","oldAttrs","minSize","t","indexOf","offset","replace","boundBoxFunc","bounded","baseSize","oldTr","translate","scale","newTr","newScaleX","newScaleY","flipEnabled","multiply","parentTransform","localTransform","copy","newLocalTransform","decompose","setAttrs","_getRotation","forceUpdate","_batchChangeChild","selector","enabledAnchors","resizeEnabled","anchorSize","anchors","find","anchorStroke","anchorStrokeWidth","anchorFill","cornerRadius","anchorCornerRadius","visible","borderEnabled","borderStroke","borderStrokeWidth","dash","borderDash","some","styleFunc","anchorStyleFunc","isTransforming","stopTransform","destroy","prototype","call","toObject","clone","obj","validateAnchors","val","Array","className","addGetterSetter","backCompat","lineEnabled","rotateHandlerOffset","enabledHandlers"],"sources":["C:/Users/lenovo pro/Documents/gncipl-6-week/Week-6_final_project/matty-project/client/node_modules/konva/lib/shapes/Transformer.js"],"sourcesContent":["import { Util, Transform } from \"../Util.js\";\r\nimport { Factory } from \"../Factory.js\";\r\nimport { Node } from \"../Node.js\";\r\nimport { Shape } from \"../Shape.js\";\r\nimport { Rect } from \"./Rect.js\";\r\nimport { Group } from \"../Group.js\";\r\nimport { Konva } from \"../Global.js\";\r\nimport { getBooleanValidator, getNumberValidator } from \"../Validators.js\";\r\nimport { _registerNode } from \"../Global.js\";\r\nconst EVENTS_NAME = 'tr-konva';\r\nconst ATTR_CHANGE_LIST = [\r\n    'resizeEnabledChange',\r\n    'rotateAnchorOffsetChange',\r\n    'rotateEnabledChange',\r\n    'enabledAnchorsChange',\r\n    'anchorSizeChange',\r\n    'borderEnabledChange',\r\n    'borderStrokeChange',\r\n    'borderStrokeWidthChange',\r\n    'borderDashChange',\r\n    'anchorStrokeChange',\r\n    'anchorStrokeWidthChange',\r\n    'anchorFillChange',\r\n    'anchorCornerRadiusChange',\r\n    'ignoreStrokeChange',\r\n    'anchorStyleFuncChange',\r\n]\r\n    .map((e) => e + `.${EVENTS_NAME}`)\r\n    .join(' ');\r\nconst NODES_RECT = 'nodesRect';\r\nconst TRANSFORM_CHANGE_STR = [\r\n    'widthChange',\r\n    'heightChange',\r\n    'scaleXChange',\r\n    'scaleYChange',\r\n    'skewXChange',\r\n    'skewYChange',\r\n    'rotationChange',\r\n    'offsetXChange',\r\n    'offsetYChange',\r\n    'transformsEnabledChange',\r\n    'strokeWidthChange',\r\n    'draggableChange',\r\n];\r\nconst ANGLES = {\r\n    'top-left': -45,\r\n    'top-center': 0,\r\n    'top-right': 45,\r\n    'middle-right': -90,\r\n    'middle-left': 90,\r\n    'bottom-left': -135,\r\n    'bottom-center': 180,\r\n    'bottom-right': 135,\r\n};\r\nconst TOUCH_DEVICE = 'ontouchstart' in Konva._global;\r\nfunction getCursor(anchorName, rad, rotateCursor) {\r\n    if (anchorName === 'rotater') {\r\n        return rotateCursor;\r\n    }\r\n    rad += Util.degToRad(ANGLES[anchorName] || 0);\r\n    const angle = ((Util.radToDeg(rad) % 360) + 360) % 360;\r\n    if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\r\n        return 'ns-resize';\r\n    }\r\n    else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\r\n        return 'nesw-resize';\r\n    }\r\n    else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\r\n        return 'ew-resize';\r\n    }\r\n    else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\r\n        return 'nwse-resize';\r\n    }\r\n    else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\r\n        return 'ns-resize';\r\n    }\r\n    else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\r\n        return 'nesw-resize';\r\n    }\r\n    else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\r\n        return 'ew-resize';\r\n    }\r\n    else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\r\n        return 'nwse-resize';\r\n    }\r\n    else {\r\n        Util.error('Transformer has unknown angle for cursor detection: ' + angle);\r\n        return 'pointer';\r\n    }\r\n}\r\nconst ANCHORS_NAMES = [\r\n    'top-left',\r\n    'top-center',\r\n    'top-right',\r\n    'middle-right',\r\n    'middle-left',\r\n    'bottom-left',\r\n    'bottom-center',\r\n    'bottom-right',\r\n];\r\nconst MAX_SAFE_INTEGER = 100000000;\r\nfunction getCenter(shape) {\r\n    return {\r\n        x: shape.x +\r\n            (shape.width / 2) * Math.cos(shape.rotation) +\r\n            (shape.height / 2) * Math.sin(-shape.rotation),\r\n        y: shape.y +\r\n            (shape.height / 2) * Math.cos(shape.rotation) +\r\n            (shape.width / 2) * Math.sin(shape.rotation),\r\n    };\r\n}\r\nfunction rotateAroundPoint(shape, angleRad, point) {\r\n    const x = point.x +\r\n        (shape.x - point.x) * Math.cos(angleRad) -\r\n        (shape.y - point.y) * Math.sin(angleRad);\r\n    const y = point.y +\r\n        (shape.x - point.x) * Math.sin(angleRad) +\r\n        (shape.y - point.y) * Math.cos(angleRad);\r\n    return {\r\n        ...shape,\r\n        rotation: shape.rotation + angleRad,\r\n        x,\r\n        y,\r\n    };\r\n}\r\nfunction rotateAroundCenter(shape, deltaRad) {\r\n    const center = getCenter(shape);\r\n    return rotateAroundPoint(shape, deltaRad, center);\r\n}\r\nfunction getSnap(snaps, newRotationRad, tol) {\r\n    let snapped = newRotationRad;\r\n    for (let i = 0; i < snaps.length; i++) {\r\n        const angle = Konva.getAngle(snaps[i]);\r\n        const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\r\n        const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\r\n        if (dif < tol) {\r\n            snapped = angle;\r\n        }\r\n    }\r\n    return snapped;\r\n}\r\nlet activeTransformersCount = 0;\r\nexport class Transformer extends Group {\r\n    constructor(config) {\r\n        super(config);\r\n        this._movingAnchorName = null;\r\n        this._transforming = false;\r\n        this._createElements();\r\n        this._handleMouseMove = this._handleMouseMove.bind(this);\r\n        this._handleMouseUp = this._handleMouseUp.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.on(ATTR_CHANGE_LIST, this.update);\r\n        if (this.getNode()) {\r\n            this.update();\r\n        }\r\n    }\r\n    attachTo(node) {\r\n        this.setNode(node);\r\n        return this;\r\n    }\r\n    setNode(node) {\r\n        Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\r\n        return this.setNodes([node]);\r\n    }\r\n    getNode() {\r\n        return this._nodes && this._nodes[0];\r\n    }\r\n    _getEventNamespace() {\r\n        return EVENTS_NAME + this._id;\r\n    }\r\n    setNodes(nodes = []) {\r\n        if (this._nodes && this._nodes.length) {\r\n            this.detach();\r\n        }\r\n        const filteredNodes = nodes.filter((node) => {\r\n            if (node.isAncestorOf(this)) {\r\n                Util.error('Konva.Transformer cannot be an a child of the node you are trying to attach');\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        this._nodes = nodes = filteredNodes;\r\n        if (nodes.length === 1 && this.useSingleNodeRotation()) {\r\n            this.rotation(nodes[0].getAbsoluteRotation());\r\n        }\r\n        else {\r\n            this.rotation(0);\r\n        }\r\n        this._nodes.forEach((node) => {\r\n            const onChange = () => {\r\n                if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\r\n                    this.rotation(this.nodes()[0].getAbsoluteRotation());\r\n                }\r\n                this._resetTransformCache();\r\n                if (!this._transforming && !this.isDragging()) {\r\n                    this.update();\r\n                }\r\n            };\r\n            if (node._attrsAffectingSize.length) {\r\n                const additionalEvents = node._attrsAffectingSize\r\n                    .map((prop) => prop + 'Change.' + this._getEventNamespace())\r\n                    .join(' ');\r\n                node.on(additionalEvents, onChange);\r\n            }\r\n            node.on(TRANSFORM_CHANGE_STR.map((e) => e + `.${this._getEventNamespace()}`).join(' '), onChange);\r\n            node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\r\n            this._proxyDrag(node);\r\n        });\r\n        this._resetTransformCache();\r\n        const elementsCreated = !!this.findOne('.top-left');\r\n        if (elementsCreated) {\r\n            this.update();\r\n        }\r\n        return this;\r\n    }\r\n    _proxyDrag(node) {\r\n        let lastPos;\r\n        node.on(`dragstart.${this._getEventNamespace()}`, (e) => {\r\n            lastPos = node.getAbsolutePosition();\r\n            if (!this.isDragging() && node !== this.findOne('.back')) {\r\n                this.startDrag(e, false);\r\n            }\r\n        });\r\n        node.on(`dragmove.${this._getEventNamespace()}`, (e) => {\r\n            if (!lastPos) {\r\n                return;\r\n            }\r\n            const abs = node.getAbsolutePosition();\r\n            const dx = abs.x - lastPos.x;\r\n            const dy = abs.y - lastPos.y;\r\n            this.nodes().forEach((otherNode) => {\r\n                if (otherNode === node) {\r\n                    return;\r\n                }\r\n                if (otherNode.isDragging()) {\r\n                    return;\r\n                }\r\n                const otherAbs = otherNode.getAbsolutePosition();\r\n                otherNode.setAbsolutePosition({\r\n                    x: otherAbs.x + dx,\r\n                    y: otherAbs.y + dy,\r\n                });\r\n                otherNode.startDrag(e);\r\n            });\r\n            lastPos = null;\r\n        });\r\n    }\r\n    getNodes() {\r\n        return this._nodes || [];\r\n    }\r\n    getActiveAnchor() {\r\n        return this._movingAnchorName;\r\n    }\r\n    detach() {\r\n        if (this._nodes) {\r\n            this._nodes.forEach((node) => {\r\n                node.off('.' + this._getEventNamespace());\r\n            });\r\n        }\r\n        this._nodes = [];\r\n        this._resetTransformCache();\r\n    }\r\n    _resetTransformCache() {\r\n        this._clearCache(NODES_RECT);\r\n        this._clearCache('transform');\r\n        this._clearSelfAndDescendantCache('absoluteTransform');\r\n    }\r\n    _getNodeRect() {\r\n        return this._getCache(NODES_RECT, this.__getNodeRect);\r\n    }\r\n    __getNodeShape(node, rot = this.rotation(), relative) {\r\n        const rect = node.getClientRect({\r\n            skipTransform: true,\r\n            skipShadow: true,\r\n            skipStroke: this.ignoreStroke(),\r\n        });\r\n        const absScale = node.getAbsoluteScale(relative);\r\n        const absPos = node.getAbsolutePosition(relative);\r\n        const dx = rect.x * absScale.x - node.offsetX() * absScale.x;\r\n        const dy = rect.y * absScale.y - node.offsetY() * absScale.y;\r\n        const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %\r\n            (Math.PI * 2);\r\n        const box = {\r\n            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\r\n            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\r\n            width: rect.width * absScale.x,\r\n            height: rect.height * absScale.y,\r\n            rotation: rotation,\r\n        };\r\n        return rotateAroundPoint(box, -Konva.getAngle(rot), {\r\n            x: 0,\r\n            y: 0,\r\n        });\r\n    }\r\n    __getNodeRect() {\r\n        const node = this.getNode();\r\n        if (!node) {\r\n            return {\r\n                x: -MAX_SAFE_INTEGER,\r\n                y: -MAX_SAFE_INTEGER,\r\n                width: 0,\r\n                height: 0,\r\n                rotation: 0,\r\n            };\r\n        }\r\n        const totalPoints = [];\r\n        this.nodes().map((node) => {\r\n            const box = node.getClientRect({\r\n                skipTransform: true,\r\n                skipShadow: true,\r\n                skipStroke: this.ignoreStroke(),\r\n            });\r\n            const points = [\r\n                { x: box.x, y: box.y },\r\n                { x: box.x + box.width, y: box.y },\r\n                { x: box.x + box.width, y: box.y + box.height },\r\n                { x: box.x, y: box.y + box.height },\r\n            ];\r\n            const trans = node.getAbsoluteTransform();\r\n            points.forEach(function (point) {\r\n                const transformed = trans.point(point);\r\n                totalPoints.push(transformed);\r\n            });\r\n        });\r\n        const tr = new Transform();\r\n        tr.rotate(-Konva.getAngle(this.rotation()));\r\n        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n        totalPoints.forEach(function (point) {\r\n            const transformed = tr.point(point);\r\n            if (minX === undefined) {\r\n                minX = maxX = transformed.x;\r\n                minY = maxY = transformed.y;\r\n            }\r\n            minX = Math.min(minX, transformed.x);\r\n            minY = Math.min(minY, transformed.y);\r\n            maxX = Math.max(maxX, transformed.x);\r\n            maxY = Math.max(maxY, transformed.y);\r\n        });\r\n        tr.invert();\r\n        const p = tr.point({ x: minX, y: minY });\r\n        return {\r\n            x: p.x,\r\n            y: p.y,\r\n            width: maxX - minX,\r\n            height: maxY - minY,\r\n            rotation: Konva.getAngle(this.rotation()),\r\n        };\r\n    }\r\n    getX() {\r\n        return this._getNodeRect().x;\r\n    }\r\n    getY() {\r\n        return this._getNodeRect().y;\r\n    }\r\n    getWidth() {\r\n        return this._getNodeRect().width;\r\n    }\r\n    getHeight() {\r\n        return this._getNodeRect().height;\r\n    }\r\n    _createElements() {\r\n        this._createBack();\r\n        ANCHORS_NAMES.forEach((name) => {\r\n            this._createAnchor(name);\r\n        });\r\n        this._createAnchor('rotater');\r\n    }\r\n    _createAnchor(name) {\r\n        const anchor = new Rect({\r\n            stroke: 'rgb(0, 161, 255)',\r\n            fill: 'white',\r\n            strokeWidth: 1,\r\n            name: name + ' _anchor',\r\n            dragDistance: 0,\r\n            draggable: true,\r\n            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',\r\n        });\r\n        const self = this;\r\n        anchor.on('mousedown touchstart', function (e) {\r\n            self._handleMouseDown(e);\r\n        });\r\n        anchor.on('dragstart', (e) => {\r\n            anchor.stopDrag();\r\n            e.cancelBubble = true;\r\n        });\r\n        anchor.on('dragend', (e) => {\r\n            e.cancelBubble = true;\r\n        });\r\n        anchor.on('mouseenter', () => {\r\n            const rad = Konva.getAngle(this.rotation());\r\n            const rotateCursor = this.rotateAnchorCursor();\r\n            const cursor = getCursor(name, rad, rotateCursor);\r\n            anchor.getStage().content &&\r\n                (anchor.getStage().content.style.cursor = cursor);\r\n            this._cursorChange = true;\r\n        });\r\n        anchor.on('mouseout', () => {\r\n            anchor.getStage().content &&\r\n                (anchor.getStage().content.style.cursor = '');\r\n            this._cursorChange = false;\r\n        });\r\n        this.add(anchor);\r\n    }\r\n    _createBack() {\r\n        const back = new Shape({\r\n            name: 'back',\r\n            width: 0,\r\n            height: 0,\r\n            sceneFunc(ctx, shape) {\r\n                const tr = shape.getParent();\r\n                const padding = tr.padding();\r\n                ctx.beginPath();\r\n                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\r\n                ctx.moveTo(shape.width() / 2, -padding);\r\n                if (tr.rotateEnabled() && tr.rotateLineVisible()) {\r\n                    ctx.lineTo(shape.width() / 2, -tr.rotateAnchorOffset() * Util._sign(shape.height()) - padding);\r\n                }\r\n                ctx.fillStrokeShape(shape);\r\n            },\r\n            hitFunc: (ctx, shape) => {\r\n                if (!this.shouldOverdrawWholeArea()) {\r\n                    return;\r\n                }\r\n                const padding = this.padding();\r\n                ctx.beginPath();\r\n                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\r\n                ctx.fillStrokeShape(shape);\r\n            },\r\n        });\r\n        this.add(back);\r\n        this._proxyDrag(back);\r\n        back.on('dragstart', (e) => {\r\n            e.cancelBubble = true;\r\n        });\r\n        back.on('dragmove', (e) => {\r\n            e.cancelBubble = true;\r\n        });\r\n        back.on('dragend', (e) => {\r\n            e.cancelBubble = true;\r\n        });\r\n        this.on('dragmove', (e) => {\r\n            this.update();\r\n        });\r\n    }\r\n    _handleMouseDown(e) {\r\n        if (this._transforming) {\r\n            return;\r\n        }\r\n        this._movingAnchorName = e.target.name().split(' ')[0];\r\n        const attrs = this._getNodeRect();\r\n        const width = attrs.width;\r\n        const height = attrs.height;\r\n        const hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\r\n        this.sin = Math.abs(height / hypotenuse);\r\n        this.cos = Math.abs(width / hypotenuse);\r\n        if (typeof window !== 'undefined') {\r\n            window.addEventListener('mousemove', this._handleMouseMove);\r\n            window.addEventListener('touchmove', this._handleMouseMove);\r\n            window.addEventListener('mouseup', this._handleMouseUp, true);\r\n            window.addEventListener('touchend', this._handleMouseUp, true);\r\n        }\r\n        this._transforming = true;\r\n        const ap = e.target.getAbsolutePosition();\r\n        const pos = e.target.getStage().getPointerPosition();\r\n        this._anchorDragOffset = {\r\n            x: pos.x - ap.x,\r\n            y: pos.y - ap.y,\r\n        };\r\n        activeTransformersCount++;\r\n        this._fire('transformstart', { evt: e.evt, target: this.getNode() });\r\n        this._nodes.forEach((target) => {\r\n            target._fire('transformstart', { evt: e.evt, target });\r\n        });\r\n    }\r\n    _handleMouseMove(e) {\r\n        let x, y, newHypotenuse;\r\n        const anchorNode = this.findOne('.' + this._movingAnchorName);\r\n        const stage = anchorNode.getStage();\r\n        stage.setPointersPositions(e);\r\n        const pp = stage.getPointerPosition();\r\n        let newNodePos = {\r\n            x: pp.x - this._anchorDragOffset.x,\r\n            y: pp.y - this._anchorDragOffset.y,\r\n        };\r\n        const oldAbs = anchorNode.getAbsolutePosition();\r\n        if (this.anchorDragBoundFunc()) {\r\n            newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\r\n        }\r\n        anchorNode.setAbsolutePosition(newNodePos);\r\n        const newAbs = anchorNode.getAbsolutePosition();\r\n        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\r\n            return;\r\n        }\r\n        if (this._movingAnchorName === 'rotater') {\r\n            const attrs = this._getNodeRect();\r\n            x = anchorNode.x() - attrs.width / 2;\r\n            y = -anchorNode.y() + attrs.height / 2;\r\n            let delta = Math.atan2(-y, x) + Math.PI / 2;\r\n            if (attrs.height < 0) {\r\n                delta -= Math.PI;\r\n            }\r\n            const oldRotation = Konva.getAngle(this.rotation());\r\n            const newRotation = oldRotation + delta;\r\n            const tol = Konva.getAngle(this.rotationSnapTolerance());\r\n            const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\r\n            const diff = snappedRot - attrs.rotation;\r\n            const shape = rotateAroundCenter(attrs, diff);\r\n            this._fitNodesInto(shape, e);\r\n            return;\r\n        }\r\n        const shiftBehavior = this.shiftBehavior();\r\n        let keepProportion;\r\n        if (shiftBehavior === 'inverted') {\r\n            keepProportion = this.keepRatio() && !e.shiftKey;\r\n        }\r\n        else if (shiftBehavior === 'none') {\r\n            keepProportion = this.keepRatio();\r\n        }\r\n        else {\r\n            keepProportion = this.keepRatio() || e.shiftKey;\r\n        }\r\n        let centeredScaling = this.centeredScaling() || e.altKey;\r\n        if (this._movingAnchorName === 'top-left') {\r\n            if (keepProportion) {\r\n                const comparePoint = centeredScaling\r\n                    ? {\r\n                        x: this.width() / 2,\r\n                        y: this.height() / 2,\r\n                    }\r\n                    : {\r\n                        x: this.findOne('.bottom-right').x(),\r\n                        y: this.findOne('.bottom-right').y(),\r\n                    };\r\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\r\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\r\n                const reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\r\n                const reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\r\n                x = newHypotenuse * this.cos * reverseX;\r\n                y = newHypotenuse * this.sin * reverseY;\r\n                this.findOne('.top-left').x(comparePoint.x - x);\r\n                this.findOne('.top-left').y(comparePoint.y - y);\r\n            }\r\n        }\r\n        else if (this._movingAnchorName === 'top-center') {\r\n            this.findOne('.top-left').y(anchorNode.y());\r\n        }\r\n        else if (this._movingAnchorName === 'top-right') {\r\n            if (keepProportion) {\r\n                const comparePoint = centeredScaling\r\n                    ? {\r\n                        x: this.width() / 2,\r\n                        y: this.height() / 2,\r\n                    }\r\n                    : {\r\n                        x: this.findOne('.bottom-left').x(),\r\n                        y: this.findOne('.bottom-left').y(),\r\n                    };\r\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\r\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\r\n                const reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\r\n                const reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\r\n                x = newHypotenuse * this.cos * reverseX;\r\n                y = newHypotenuse * this.sin * reverseY;\r\n                this.findOne('.top-right').x(comparePoint.x + x);\r\n                this.findOne('.top-right').y(comparePoint.y - y);\r\n            }\r\n            var pos = anchorNode.position();\r\n            this.findOne('.top-left').y(pos.y);\r\n            this.findOne('.bottom-right').x(pos.x);\r\n        }\r\n        else if (this._movingAnchorName === 'middle-left') {\r\n            this.findOne('.top-left').x(anchorNode.x());\r\n        }\r\n        else if (this._movingAnchorName === 'middle-right') {\r\n            this.findOne('.bottom-right').x(anchorNode.x());\r\n        }\r\n        else if (this._movingAnchorName === 'bottom-left') {\r\n            if (keepProportion) {\r\n                const comparePoint = centeredScaling\r\n                    ? {\r\n                        x: this.width() / 2,\r\n                        y: this.height() / 2,\r\n                    }\r\n                    : {\r\n                        x: this.findOne('.top-right').x(),\r\n                        y: this.findOne('.top-right').y(),\r\n                    };\r\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\r\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\r\n                const reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\r\n                const reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\r\n                x = newHypotenuse * this.cos * reverseX;\r\n                y = newHypotenuse * this.sin * reverseY;\r\n                anchorNode.x(comparePoint.x - x);\r\n                anchorNode.y(comparePoint.y + y);\r\n            }\r\n            pos = anchorNode.position();\r\n            this.findOne('.top-left').x(pos.x);\r\n            this.findOne('.bottom-right').y(pos.y);\r\n        }\r\n        else if (this._movingAnchorName === 'bottom-center') {\r\n            this.findOne('.bottom-right').y(anchorNode.y());\r\n        }\r\n        else if (this._movingAnchorName === 'bottom-right') {\r\n            if (keepProportion) {\r\n                const comparePoint = centeredScaling\r\n                    ? {\r\n                        x: this.width() / 2,\r\n                        y: this.height() / 2,\r\n                    }\r\n                    : {\r\n                        x: this.findOne('.top-left').x(),\r\n                        y: this.findOne('.top-left').y(),\r\n                    };\r\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\r\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\r\n                const reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\r\n                const reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\r\n                x = newHypotenuse * this.cos * reverseX;\r\n                y = newHypotenuse * this.sin * reverseY;\r\n                this.findOne('.bottom-right').x(comparePoint.x + x);\r\n                this.findOne('.bottom-right').y(comparePoint.y + y);\r\n            }\r\n        }\r\n        else {\r\n            console.error(new Error('Wrong position argument of selection resizer: ' +\r\n                this._movingAnchorName));\r\n        }\r\n        centeredScaling = this.centeredScaling() || e.altKey;\r\n        if (centeredScaling) {\r\n            const topLeft = this.findOne('.top-left');\r\n            const bottomRight = this.findOne('.bottom-right');\r\n            const topOffsetX = topLeft.x();\r\n            const topOffsetY = topLeft.y();\r\n            const bottomOffsetX = this.getWidth() - bottomRight.x();\r\n            const bottomOffsetY = this.getHeight() - bottomRight.y();\r\n            bottomRight.move({\r\n                x: -topOffsetX,\r\n                y: -topOffsetY,\r\n            });\r\n            topLeft.move({\r\n                x: bottomOffsetX,\r\n                y: bottomOffsetY,\r\n            });\r\n        }\r\n        const absPos = this.findOne('.top-left').getAbsolutePosition();\r\n        x = absPos.x;\r\n        y = absPos.y;\r\n        const width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\r\n        const height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\r\n        this._fitNodesInto({\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height,\r\n            rotation: Konva.getAngle(this.rotation()),\r\n        }, e);\r\n    }\r\n    _handleMouseUp(e) {\r\n        this._removeEvents(e);\r\n    }\r\n    getAbsoluteTransform() {\r\n        return this.getTransform();\r\n    }\r\n    _removeEvents(e) {\r\n        var _a;\r\n        if (this._transforming) {\r\n            this._transforming = false;\r\n            if (typeof window !== 'undefined') {\r\n                window.removeEventListener('mousemove', this._handleMouseMove);\r\n                window.removeEventListener('touchmove', this._handleMouseMove);\r\n                window.removeEventListener('mouseup', this._handleMouseUp, true);\r\n                window.removeEventListener('touchend', this._handleMouseUp, true);\r\n            }\r\n            const node = this.getNode();\r\n            activeTransformersCount--;\r\n            this._fire('transformend', { evt: e, target: node });\r\n            (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\r\n            if (node) {\r\n                this._nodes.forEach((target) => {\r\n                    var _a;\r\n                    target._fire('transformend', { evt: e, target });\r\n                    (_a = target.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\r\n                });\r\n            }\r\n            this._movingAnchorName = null;\r\n        }\r\n    }\r\n    _fitNodesInto(newAttrs, evt) {\r\n        const oldAttrs = this._getNodeRect();\r\n        const minSize = 1;\r\n        if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\r\n            this.update();\r\n            return;\r\n        }\r\n        if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\r\n            this.update();\r\n            return;\r\n        }\r\n        const t = new Transform();\r\n        t.rotate(Konva.getAngle(this.rotation()));\r\n        if (this._movingAnchorName &&\r\n            newAttrs.width < 0 &&\r\n            this._movingAnchorName.indexOf('left') >= 0) {\r\n            const offset = t.point({\r\n                x: -this.padding() * 2,\r\n                y: 0,\r\n            });\r\n            newAttrs.x += offset.x;\r\n            newAttrs.y += offset.y;\r\n            newAttrs.width += this.padding() * 2;\r\n            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\r\n            this._anchorDragOffset.x -= offset.x;\r\n            this._anchorDragOffset.y -= offset.y;\r\n        }\r\n        else if (this._movingAnchorName &&\r\n            newAttrs.width < 0 &&\r\n            this._movingAnchorName.indexOf('right') >= 0) {\r\n            const offset = t.point({\r\n                x: this.padding() * 2,\r\n                y: 0,\r\n            });\r\n            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\r\n            this._anchorDragOffset.x -= offset.x;\r\n            this._anchorDragOffset.y -= offset.y;\r\n            newAttrs.width += this.padding() * 2;\r\n        }\r\n        if (this._movingAnchorName &&\r\n            newAttrs.height < 0 &&\r\n            this._movingAnchorName.indexOf('top') >= 0) {\r\n            const offset = t.point({\r\n                x: 0,\r\n                y: -this.padding() * 2,\r\n            });\r\n            newAttrs.x += offset.x;\r\n            newAttrs.y += offset.y;\r\n            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\r\n            this._anchorDragOffset.x -= offset.x;\r\n            this._anchorDragOffset.y -= offset.y;\r\n            newAttrs.height += this.padding() * 2;\r\n        }\r\n        else if (this._movingAnchorName &&\r\n            newAttrs.height < 0 &&\r\n            this._movingAnchorName.indexOf('bottom') >= 0) {\r\n            const offset = t.point({\r\n                x: 0,\r\n                y: this.padding() * 2,\r\n            });\r\n            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\r\n            this._anchorDragOffset.x -= offset.x;\r\n            this._anchorDragOffset.y -= offset.y;\r\n            newAttrs.height += this.padding() * 2;\r\n        }\r\n        if (this.boundBoxFunc()) {\r\n            const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\r\n            if (bounded) {\r\n                newAttrs = bounded;\r\n            }\r\n            else {\r\n                Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\r\n            }\r\n        }\r\n        const baseSize = 10000000;\r\n        const oldTr = new Transform();\r\n        oldTr.translate(oldAttrs.x, oldAttrs.y);\r\n        oldTr.rotate(oldAttrs.rotation);\r\n        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\r\n        const newTr = new Transform();\r\n        const newScaleX = newAttrs.width / baseSize;\r\n        const newScaleY = newAttrs.height / baseSize;\r\n        if (this.flipEnabled() === false) {\r\n            newTr.translate(newAttrs.x, newAttrs.y);\r\n            newTr.rotate(newAttrs.rotation);\r\n            newTr.translate(newAttrs.width < 0 ? newAttrs.width : 0, newAttrs.height < 0 ? newAttrs.height : 0);\r\n            newTr.scale(Math.abs(newScaleX), Math.abs(newScaleY));\r\n        }\r\n        else {\r\n            newTr.translate(newAttrs.x, newAttrs.y);\r\n            newTr.rotate(newAttrs.rotation);\r\n            newTr.scale(newScaleX, newScaleY);\r\n        }\r\n        const delta = newTr.multiply(oldTr.invert());\r\n        this._nodes.forEach((node) => {\r\n            var _a;\r\n            if (!node.getStage()) {\r\n                return;\r\n            }\r\n            const parentTransform = node.getParent().getAbsoluteTransform();\r\n            const localTransform = node.getTransform().copy();\r\n            localTransform.translate(node.offsetX(), node.offsetY());\r\n            const newLocalTransform = new Transform();\r\n            newLocalTransform\r\n                .multiply(parentTransform.copy().invert())\r\n                .multiply(delta)\r\n                .multiply(parentTransform)\r\n                .multiply(localTransform);\r\n            const attrs = newLocalTransform.decompose();\r\n            node.setAttrs(attrs);\r\n            (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\r\n        });\r\n        this.rotation(Util._getRotation(newAttrs.rotation));\r\n        this._nodes.forEach((node) => {\r\n            this._fire('transform', { evt: evt, target: node });\r\n            node._fire('transform', { evt: evt, target: node });\r\n        });\r\n        this._resetTransformCache();\r\n        this.update();\r\n        this.getLayer().batchDraw();\r\n    }\r\n    forceUpdate() {\r\n        this._resetTransformCache();\r\n        this.update();\r\n    }\r\n    _batchChangeChild(selector, attrs) {\r\n        const anchor = this.findOne(selector);\r\n        anchor.setAttrs(attrs);\r\n    }\r\n    update() {\r\n        var _a;\r\n        const attrs = this._getNodeRect();\r\n        this.rotation(Util._getRotation(attrs.rotation));\r\n        const width = attrs.width;\r\n        const height = attrs.height;\r\n        const enabledAnchors = this.enabledAnchors();\r\n        const resizeEnabled = this.resizeEnabled();\r\n        const padding = this.padding();\r\n        const anchorSize = this.anchorSize();\r\n        const anchors = this.find('._anchor');\r\n        anchors.forEach((node) => {\r\n            node.setAttrs({\r\n                width: anchorSize,\r\n                height: anchorSize,\r\n                offsetX: anchorSize / 2,\r\n                offsetY: anchorSize / 2,\r\n                stroke: this.anchorStroke(),\r\n                strokeWidth: this.anchorStrokeWidth(),\r\n                fill: this.anchorFill(),\r\n                cornerRadius: this.anchorCornerRadius(),\r\n            });\r\n        });\r\n        this._batchChangeChild('.top-left', {\r\n            x: 0,\r\n            y: 0,\r\n            offsetX: anchorSize / 2 + padding,\r\n            offsetY: anchorSize / 2 + padding,\r\n            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,\r\n        });\r\n        this._batchChangeChild('.top-center', {\r\n            x: width / 2,\r\n            y: 0,\r\n            offsetY: anchorSize / 2 + padding,\r\n            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,\r\n        });\r\n        this._batchChangeChild('.top-right', {\r\n            x: width,\r\n            y: 0,\r\n            offsetX: anchorSize / 2 - padding,\r\n            offsetY: anchorSize / 2 + padding,\r\n            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,\r\n        });\r\n        this._batchChangeChild('.middle-left', {\r\n            x: 0,\r\n            y: height / 2,\r\n            offsetX: anchorSize / 2 + padding,\r\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,\r\n        });\r\n        this._batchChangeChild('.middle-right', {\r\n            x: width,\r\n            y: height / 2,\r\n            offsetX: anchorSize / 2 - padding,\r\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,\r\n        });\r\n        this._batchChangeChild('.bottom-left', {\r\n            x: 0,\r\n            y: height,\r\n            offsetX: anchorSize / 2 + padding,\r\n            offsetY: anchorSize / 2 - padding,\r\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,\r\n        });\r\n        this._batchChangeChild('.bottom-center', {\r\n            x: width / 2,\r\n            y: height,\r\n            offsetY: anchorSize / 2 - padding,\r\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,\r\n        });\r\n        this._batchChangeChild('.bottom-right', {\r\n            x: width,\r\n            y: height,\r\n            offsetX: anchorSize / 2 - padding,\r\n            offsetY: anchorSize / 2 - padding,\r\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,\r\n        });\r\n        this._batchChangeChild('.rotater', {\r\n            x: width / 2,\r\n            y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\r\n            visible: this.rotateEnabled(),\r\n        });\r\n        this._batchChangeChild('.back', {\r\n            width: width,\r\n            height: height,\r\n            visible: this.borderEnabled(),\r\n            stroke: this.borderStroke(),\r\n            strokeWidth: this.borderStrokeWidth(),\r\n            dash: this.borderDash(),\r\n            draggable: this.nodes().some((node) => node.draggable()),\r\n            x: 0,\r\n            y: 0,\r\n        });\r\n        const styleFunc = this.anchorStyleFunc();\r\n        if (styleFunc) {\r\n            anchors.forEach((node) => {\r\n                styleFunc(node);\r\n            });\r\n        }\r\n        (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\r\n    }\r\n    isTransforming() {\r\n        return this._transforming;\r\n    }\r\n    stopTransform() {\r\n        if (this._transforming) {\r\n            this._removeEvents();\r\n            const anchorNode = this.findOne('.' + this._movingAnchorName);\r\n            if (anchorNode) {\r\n                anchorNode.stopDrag();\r\n            }\r\n        }\r\n    }\r\n    destroy() {\r\n        if (this.getStage() && this._cursorChange) {\r\n            this.getStage().content && (this.getStage().content.style.cursor = '');\r\n        }\r\n        Group.prototype.destroy.call(this);\r\n        this.detach();\r\n        this._removeEvents();\r\n        return this;\r\n    }\r\n    toObject() {\r\n        return Node.prototype.toObject.call(this);\r\n    }\r\n    clone(obj) {\r\n        const node = Node.prototype.clone.call(this, obj);\r\n        return node;\r\n    }\r\n    getClientRect() {\r\n        if (this.nodes().length > 0) {\r\n            return super.getClientRect();\r\n        }\r\n        else {\r\n            return { x: 0, y: 0, width: 0, height: 0 };\r\n        }\r\n    }\r\n}\r\nTransformer.isTransforming = () => {\r\n    return activeTransformersCount > 0;\r\n};\r\nfunction validateAnchors(val) {\r\n    if (!(val instanceof Array)) {\r\n        Util.warn('enabledAnchors value should be an array');\r\n    }\r\n    if (val instanceof Array) {\r\n        val.forEach(function (name) {\r\n            if (ANCHORS_NAMES.indexOf(name) === -1) {\r\n                Util.warn('Unknown anchor name: ' +\r\n                    name +\r\n                    '. Available names are: ' +\r\n                    ANCHORS_NAMES.join(', '));\r\n            }\r\n        });\r\n    }\r\n    return val || [];\r\n}\r\nTransformer.prototype.className = 'Transformer';\r\n_registerNode(Transformer);\r\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\r\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\r\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\r\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\r\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\r\nFactory.addGetterSetter(Transformer, 'rotateLineVisible', true);\r\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\r\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\r\nFactory.addGetterSetter(Transformer, 'rotateAnchorCursor', 'crosshair');\r\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\r\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\r\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\r\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\r\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\r\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\r\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\r\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\r\nFactory.addGetterSetter(Transformer, 'borderDash');\r\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\r\nFactory.addGetterSetter(Transformer, 'shiftBehavior', 'default');\r\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\r\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\r\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\r\nFactory.addGetterSetter(Transformer, 'nodes');\r\nFactory.addGetterSetter(Transformer, 'node');\r\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\r\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\r\nFactory.addGetterSetter(Transformer, 'anchorStyleFunc');\r\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\r\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\r\nFactory.backCompat(Transformer, {\r\n    lineEnabled: 'borderEnabled',\r\n    rotateHandlerOffset: 'rotateAnchorOffset',\r\n    enabledHandlers: 'enabledAnchors',\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}