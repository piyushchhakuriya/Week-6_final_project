{"ast":null,"code":"import axios from 'axios';\nconst API = axios.create({\n  baseURL: 'http://localhost:5000/api' // change if deployed\n});\nexport const authAPI = {\n  // Register new user\n  register: async userData => {\n    const response = await apiRequest('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n\n    // Store token and user if returned\n    if (response.token) {\n      tokenManager.setToken(response.token);\n      tokenManager.setUser(response.user);\n    }\n    return response;\n  },\n  // Login user\n  login: async credentials => {\n    const response = await apiRequest('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n\n    // Store token and user\n    if (response.token) {\n      tokenManager.setToken(response.token);\n      tokenManager.setUser(response.user);\n    }\n    return response;\n  },\n  // Logout user\n  logout: () => {\n    tokenManager.clearAuth();\n  },\n  // Verify JWT token\n  verifyToken: async () => {\n    return await apiRequest('/auth/verify', {\n      method: 'GET'\n    });\n  },\n  // Google OAuth\n  googleAuth: async googleToken => {\n    const response = await apiRequest('/auth/google', {\n      method: 'POST',\n      body: JSON.stringify({\n        token: googleToken\n      })\n    });\n    if (response.token) {\n      tokenManager.setToken(response.token);\n      tokenManager.setUser(response.user);\n    }\n    return response;\n  },\n  // Forgot Password\n  forgotPassword: async email => {\n    return await apiRequest('/auth/forgot-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n  },\n  // Reset Password\n  resetPassword: async (token, newPassword) => {\n    return await apiRequest('/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        token,\n        password: newPassword\n      })\n    });\n  }\n};\nAPI.interceptors.request.use(req => {\n  const token = localStorage.getItem('token');\n  if (token) req.headers.Authorization = `Bearer ${token}`;\n  return req;\n});\n\n// Export default API object\nexport default {\n  API,\n  authAPI\n};","map":{"version":3,"names":["axios","API","create","baseURL","authAPI","register","userData","response","apiRequest","method","body","JSON","stringify","token","tokenManager","setToken","setUser","user","login","credentials","logout","clearAuth","verifyToken","googleAuth","googleToken","forgotPassword","email","resetPassword","newPassword","password","interceptors","request","use","req","localStorage","getItem","headers","Authorization"],"sources":["C:/Users/lenovo pro/Documents/gncipl-6-week/Week-6_final_project/matty-project/client/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // change if deployed\r\n});\r\n\r\nexport const authAPI = {\r\n  // Register new user\r\n  register: async (userData) => {\r\n    const response = await apiRequest('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n    \r\n    // Store token and user if returned\r\n    if (response.token) {\r\n      tokenManager.setToken(response.token);\r\n      tokenManager.setUser(response.user);\r\n    }\r\n    \r\n    return response;\r\n  },\r\n\r\n  // Login user\r\n  login: async (credentials) => {\r\n    const response = await apiRequest('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    \r\n    // Store token and user\r\n    if (response.token) {\r\n      tokenManager.setToken(response.token);\r\n      tokenManager.setUser(response.user);\r\n    }\r\n    \r\n    return response;\r\n  },\r\n\r\n  // Logout user\r\n  logout: () => {\r\n    tokenManager.clearAuth();\r\n  },\r\n\r\n  // Verify JWT token\r\n  verifyToken: async () => {\r\n    return await apiRequest('/auth/verify', {\r\n      method: 'GET',\r\n    });\r\n  },\r\n\r\n  // Google OAuth\r\n  googleAuth: async (googleToken) => {\r\n    const response = await apiRequest('/auth/google', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ token: googleToken }),\r\n    });\r\n    \r\n    if (response.token) {\r\n      tokenManager.setToken(response.token);\r\n      tokenManager.setUser(response.user);\r\n    }\r\n    \r\n    return response;\r\n  },\r\n\r\n  // Forgot Password\r\n  forgotPassword: async (email) => {\r\n    return await apiRequest('/auth/forgot-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email }),\r\n    });\r\n  },\r\n\r\n  // Reset Password\r\n  resetPassword: async (token, newPassword) => {\r\n    return await apiRequest('/auth/reset-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ token, password: newPassword }),\r\n    });\r\n  },\r\n};\r\n\r\nAPI.interceptors.request.use((req) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) req.headers.Authorization = `Bearer ${token}`;\r\n  return req;\r\n});\r\n\r\n\r\n\r\n\r\n// Export default API object\r\nexport default {API ,authAPI};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}